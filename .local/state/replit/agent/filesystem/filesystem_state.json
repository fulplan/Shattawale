{"file_contents":{"README.md":{"content":"# EcomBot - Telegram E-commerce Bot with MTN Mobile Money\n\nA production-ready Telegram e-commerce bot with MTN Mobile Money (MoMo) payments and comprehensive admin dashboard built with Node.js, React, and PostgreSQL.\n\n## üöÄ Features\n\n### Telegram Bot\n- **Product Catalog**: Browse products by category with pagination\n- **Search Functionality**: Find products by name or SKU\n- **Shopping Cart**: Add, modify, and remove items\n- **MTN MoMo Payments**: Secure payment processing with Ghana Cedis (GHS)\n- **Order Tracking**: Real-time order status updates\n- **User Management**: Automatic user registration and profile management\n\n### Admin Dashboard\n- **Product Management**: Full CRUD operations with image uploads\n- **Order Management**: Track and update order status\n- **Payment Logs**: MTN MoMo transaction history and reconciliation\n- **Customer Management**: View user profiles and order history\n- **Analytics Dashboard**: Revenue, conversion rates, and performance metrics\n- **Coupon System**: Create and manage discount codes\n- **System Settings**: User management and configuration\n\n### Payment Integration\n- **MTN Mobile Money**: Primary payment method for Ghana market\n- **Automatic Reconciliation**: Background job to sync payment status\n- **Webhook Processing**: Real-time payment confirmations\n- **Idempotency**: Prevent duplicate charges\n- **Timeout Handling**: Automatic cancellation after 10 minutes\n\n## üõ† Tech Stack\n\n### Backend\n- **Node.js** with TypeScript\n- **Express.js** for API routes\n- **PostgreSQL** with Prisma ORM\n- **Passport.js** for authentication\n- **Node-cron** for scheduled jobs\n\n### Frontend\n- **React** with TypeScript\n- **Tailwind CSS** for styling\n- **Wouter** for routing\n- **TanStack Query** for data fetching\n- **Shadcn/ui** components\n\n### DevOps\n- **Docker** & docker-compose\n- **GitHub Actions** for CI/CD\n- **Jest** for testing\n\n## üìã Prerequisites\n\n- Node.js 18+ and npm\n- PostgreSQL 13+\n- Docker and docker-compose (optional)\n- Telegram Bot Token (from @BotFather)\n- MTN MoMo API credentials\n\n## üèÉ‚Äç‚ôÇÔ∏è Quick Start\n\n### 1. Clone and Install\n\n```bash\ngit clone https://github.com/your-repo/ecombot.git\ncd ecombot\nnpm install\n","size_bytes":2184},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# EcomBot - Telegram E-commerce Bot with MTN Mobile Money\n\n## Overview\n\nEcomBot is a production-ready Telegram e-commerce bot with comprehensive admin dashboard. The system allows customers to browse products, add items to cart, and checkout using MTN Mobile Money (MoMo) payments in Ghana Cedis (GHS). Administrators can manage the entire operation through a web-based CMS with full CRUD operations for products, orders, customers, and analytics.\n\nThe project consists of three main components:\n- **Telegram Bot**: Customer-facing storefront with product catalog, shopping cart, and checkout\n- **Admin CMS**: React-based web application for business management\n- **Payment Processing**: MTN Mobile Money integration with webhook handling and reconciliation\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Full-Stack TypeScript Application\nThe entire application is built with TypeScript for type safety and developer experience. The monorepo structure includes both frontend and backend code with shared types and schemas.\n\n### Backend Architecture (Node.js + Express)\n- **Framework**: Express.js with TypeScript for API routes and middleware\n- **Authentication**: Passport.js with local strategy using session-based auth\n- **Session Management**: PostgreSQL session store with connect-pg-simple\n- **Rate Limiting**: Express rate limiter for webhook and auth endpoints\n- **Error Handling**: Centralized error middleware with structured logging\n\n### Database Layer (PostgreSQL + Drizzle ORM)\n- **ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Connection**: Neon serverless PostgreSQL with connection pooling\n- **Schema**: Comprehensive schema covering users, products, orders, payments, and audit logs\n- **Data Integrity**: Foreign key relationships and enum constraints for order/payment statuses\n\n### Frontend Architecture (React + TypeScript)\n- **Framework**: React with TypeScript and Vite for fast development\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state and caching\n- **UI Components**: Shadcn/ui component library with Radix primitives\n- **Styling**: Tailwind CSS with custom design tokens and dark mode support\n- **Forms**: React Hook Form with Zod validation\n\n### Telegram Bot Integration\n- **Webhook Architecture**: Production-ready webhook handling instead of polling\n- **Bot API**: Official Telegram Bot API for message handling and inline keyboards\n- **User Management**: Automatic user registration and profile synchronization\n- **Rich UI**: Inline keyboards, quick replies, and media support for product catalog\n\n### Payment Processing (MTN Mobile Money)\n- **Collection API**: MTN MoMo Collections API for payment initiation\n- **Webhook Processing**: Real-time payment status updates with signature validation\n- **Reconciliation Service**: Background cron job for payment status synchronization\n- **Idempotency**: Unique reference IDs and duplicate payment prevention\n- **Timeout Handling**: Automatic payment cancellation after 10 minutes\n\n### Background Jobs & Cron\n- **Reconciliation**: Scheduled payment status checks every 15 minutes\n- **Node-cron**: Lightweight job scheduler for maintenance tasks\n- **Graceful Handling**: Prevent overlapping reconciliation runs\n\n### Security & Production Features\n- **Password Hashing**: Scrypt-based password hashing with salt\n- **Session Security**: HTTP-only cookies with secure flags in production\n- **Rate Limiting**: API endpoint protection against abuse\n- **CORS**: Cross-origin resource sharing configuration\n- **Environment Configuration**: Comprehensive environment variable management\n\n### Testing Strategy\n- **Unit Tests**: Jest for service layer and utility functions\n- **Integration Tests**: API endpoint testing with supertest\n- **Mocking**: External service mocks for MTN MoMo and Telegram APIs\n- **Test Database**: Separate test database with automatic cleanup\n\n## External Dependencies\n\n### Payment Gateway\n- **MTN Mobile Money API**: Primary payment processor for Ghana market\n- **Environment**: Sandbox and production environment support\n- **Authentication**: OAuth 2.0 client credentials flow\n- **Webhooks**: Real-time payment status notifications\n- **Currency**: Ghana Cedis (GHS) exclusively\n\n### Database & Infrastructure\n- **Neon PostgreSQL**: Serverless PostgreSQL database with connection pooling\n- **WebSocket Support**: Required for Neon serverless connections\n- **Session Store**: PostgreSQL-backed session storage for admin authentication\n\n### Telegram Platform\n- **Telegram Bot API**: Official bot platform integration\n- **Webhook URL**: HTTPS endpoint for receiving message updates\n- **Bot Token**: Authentication token for API access\n- **Message Types**: Text messages, inline keyboards, and media support\n\n### UI & Component Libraries\n- **Radix UI**: Headless component primitives for accessibility\n- **Tailwind CSS**: Utility-first CSS framework with custom configuration\n- **Lucide Icons**: Modern icon library with React components\n- **Embla Carousel**: Touch-friendly carousel component\n\n### Development & Build Tools\n- **Vite**: Fast build tool with HMR and TypeScript support\n- **ESBuild**: Server bundling for production deployment\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer\n- **TypeScript**: Type checking and compilation across entire stack\n\n### Production & Deployment\n- **Docker**: Containerization support with docker-compose for local development\n- **GitHub Actions**: CI/CD pipeline configuration\n- **Health Checks**: Application health monitoring endpoints\n- **Logging**: Structured logging with timestamp and source tracking","size_bytes":5704},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"docs/API.md":{"content":"# EcomBot API Documentation\n\n## Authentication\n\nAll admin API endpoints require authentication. Use the `/api/login` endpoint to authenticate.\n\n### POST /api/login\nLogin with email and password.\n\n**Request Body:**\n```json\n{\n  \"email\": \"admin@example.com\",\n  \"password\": \"ChangeMe!2025\"\n}\n","size_bytes":288},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { AdminUser as SelectAdminUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectAdminUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || 'telegram-ecom-bot-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(\n      { usernameField: 'email' },\n      async (email, password, done) => {\n        try {\n          const user = await storage.getAdminUserByEmail(email);\n          if (!user || !user.isActive || !(await comparePasswords(password, user.password))) {\n            return done(null, false, { message: 'Invalid credentials' });\n          }\n          return done(null, user);\n        } catch (error) {\n          return done(error);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getAdminUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { email, password, name } = req.body;\n      \n      if (!email || !password || !name) {\n        return res.status(400).json({ message: \"Email, password, and name are required\" });\n      }\n\n      const existingUser = await storage.getAdminUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      const hashedPassword = await hashPassword(password);\n      const user = await storage.createAdminUser({\n        email,\n        password: hashedPassword,\n        name,\n        role: 'admin',\n        mustChangePassword: false\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json({ \n          id: user.id, \n          email: user.email, \n          name: user.name, \n          role: user.role,\n          mustChangePassword: user.mustChangePassword\n        });\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: SelectAdminUser | false, info: any) => {\n      if (err) return next(err);\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Invalid credentials\" });\n      }\n      \n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(200).json({ \n          id: user.id, \n          email: user.email, \n          name: user.name, \n          role: user.role,\n          mustChangePassword: user.mustChangePassword\n        });\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    const user = req.user!;\n    res.json({ \n      id: user.id, \n      email: user.email, \n      name: user.name, \n      role: user.role,\n      mustChangePassword: user.mustChangePassword\n    });\n  });\n\n  app.post(\"/api/change-password\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n      \n      const { currentPassword, newPassword } = req.body;\n      const user = req.user!;\n      \n      if (!currentPassword || !newPassword) {\n        return res.status(400).json({ message: \"Current and new passwords are required\" });\n      }\n\n      const isValidPassword = await comparePasswords(currentPassword, user.password);\n      if (!isValidPassword) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n\n      const hashedNewPassword = await hashPassword(newPassword);\n      await storage.updateAdminUser(user.id, { \n        password: hashedNewPassword, \n        mustChangePassword: false \n      });\n\n      res.json({ message: \"Password changed successfully\" });\n    } catch (error) {\n      next(error);\n    }\n  });\n}\n\nexport { hashPassword };\n","size_bytes":5291},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { setupAuth } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { telegramService } from \"./services/telegram\";\nimport { mtnMomoService } from \"./services/mtn-momo\";\nimport { reconciliationService } from \"./services/reconciliation\";\nimport rateLimit from \"express-rate-limit\";\n\n// Rate limiting middleware\nconst webhookLimiter = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: { error: 'Too many webhook requests' }\n});\n\nconst authLimiter = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 10, // limit each IP to 10 requests per windowMs\n  message: { error: 'Too many authentication requests' }\n});\n\nfunction requireAuth(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication routes\n  setupAuth(app);\n\n  // Apply rate limiting to auth routes\n  app.use('/api/login', authLimiter);\n  app.use('/api/register', authLimiter);\n\n  // Health check\n  app.get('/healthz', (req, res) => {\n    res.json({ \n      status: 'healthy', \n      timestamp: new Date().toISOString(),\n      services: {\n        database: 'connected',\n        telegram: telegramService ? 'configured' : 'not configured',\n        mtnMomo: process.env.MTN_CLIENT_ID ? 'configured' : 'not configured'\n      }\n    });\n  });\n\n  // Telegram webhook (with rate limiting)\n  app.post(telegramService.getWebhookPath(), webhookLimiter, async (req, res) => {\n    await telegramService.handleWebhook(req, res);\n  });\n\n  // MTN MoMo webhook\n  app.post('/api/webhooks/mtn-callback', webhookLimiter, async (req, res) => {\n    try {\n      const signature = req.headers['x-mtn-signature'] as string;\n      const payload = JSON.stringify(req.body);\n      \n      // Validate webhook signature if provided\n      if (signature && !mtnMomoService.validateWebhookSignature(payload, signature)) {\n        console.warn('Invalid MTN webhook signature');\n        return res.status(401).json({ error: 'Invalid signature' });\n      }\n\n      const webhookData = req.body;\n      console.log('MTN MoMo webhook received:', webhookData);\n\n      // Find payment by reference ID or external ID\n      let payment;\n      if (webhookData.referenceId) {\n        payment = await storage.getAllPayments().then(payments => \n          payments.find(p => p.providerReference === webhookData.referenceId)\n        );\n      }\n\n      if (!payment && webhookData.externalId) {\n        payment = await storage.getAllPayments().then(payments => \n          payments.find(p => p.externalId === webhookData.externalId)\n        );\n      }\n\n      if (!payment) {\n        console.warn('Payment not found for webhook:', webhookData);\n        return res.status(404).json({ error: 'Payment not found' });\n      }\n\n      // Update payment status based on webhook\n      let newStatus: 'SUCCESS' | 'FAILED' | 'PENDING' = 'PENDING';\n      let orderStatus: 'PAID' | 'CANCELLED' | 'PENDING' = 'PENDING';\n\n      if (webhookData.status === 'SUCCESSFUL' || webhookData.status === 'SUCCESS') {\n        newStatus = 'SUCCESS';\n        orderStatus = 'PAID';\n      } else if (webhookData.status === 'FAILED' || webhookData.status === 'REJECTED') {\n        newStatus = 'FAILED';\n        orderStatus = 'CANCELLED';\n      }\n\n      // Update payment\n      await storage.updatePayment(payment.id, {\n        status: newStatus,\n        providerReference: webhookData.referenceId || payment.providerReference,\n        webhookPayload: webhookData\n      });\n\n      // Update order\n      await storage.updateOrder(payment.orderId, {\n        status: orderStatus\n      });\n\n      console.log(`Payment ${payment.id} updated to ${newStatus}, order ${payment.orderId} updated to ${orderStatus}`);\n\n      res.json({ success: true, message: 'Webhook processed' });\n    } catch (error) {\n      console.error('Error processing MTN webhook:', error);\n      res.status(500).json({ error: 'Webhook processing failed' });\n    }\n  });\n\n  // Dashboard API routes (require authentication)\n  app.get('/api/dashboard/metrics', requireAuth, async (req, res) => {\n    try {\n      const metrics = await storage.getDashboardMetrics();\n      res.json(metrics);\n    } catch (error) {\n      console.error('Error fetching dashboard metrics:', error);\n      res.status(500).json({ error: 'Failed to fetch metrics' });\n    }\n  });\n\n  // Products API\n  app.get('/api/products', requireAuth, async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      res.json(products);\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      res.status(500).json({ error: 'Failed to fetch products' });\n    }\n  });\n\n  app.post('/api/products', requireAuth, async (req, res) => {\n    try {\n      const product = await storage.createProduct(req.body);\n      res.status(201).json(product);\n    } catch (error) {\n      console.error('Error creating product:', error);\n      res.status(500).json({ error: 'Failed to create product' });\n    }\n  });\n\n  app.put('/api/products/:id', requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const product = await storage.updateProduct(id, req.body);\n      if (!product) {\n        return res.status(404).json({ error: 'Product not found' });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error('Error updating product:', error);\n      res.status(500).json({ error: 'Failed to update product' });\n    }\n  });\n\n  app.delete('/api/products/:id', requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteProduct(id);\n      if (!success) {\n        return res.status(404).json({ error: 'Product not found' });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error deleting product:', error);\n      res.status(500).json({ error: 'Failed to delete product' });\n    }\n  });\n\n  // Categories API\n  app.get('/api/categories', requireAuth, async (req, res) => {\n    try {\n      const categories = await storage.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      res.status(500).json({ error: 'Failed to fetch categories' });\n    }\n  });\n\n  app.post('/api/categories', requireAuth, async (req, res) => {\n    try {\n      const category = await storage.createCategory(req.body);\n      res.status(201).json(category);\n    } catch (error) {\n      console.error('Error creating category:', error);\n      res.status(500).json({ error: 'Failed to create category' });\n    }\n  });\n\n  // Orders API\n  app.get('/api/orders', requireAuth, async (req, res) => {\n    try {\n      const orders = await storage.getAllOrders();\n      res.json(orders);\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      res.status(500).json({ error: 'Failed to fetch orders' });\n    }\n  });\n\n  app.put('/api/orders/:id', requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const order = await storage.updateOrder(id, req.body);\n      if (!order) {\n        return res.status(404).json({ error: 'Order not found' });\n      }\n      res.json(order);\n    } catch (error) {\n      console.error('Error updating order:', error);\n      res.status(500).json({ error: 'Failed to update order' });\n    }\n  });\n\n  // Payments API\n  app.get('/api/payments', requireAuth, async (req, res) => {\n    try {\n      const payments = await storage.getAllPayments();\n      res.json(payments);\n    } catch (error) {\n      console.error('Error fetching payments:', error);\n      res.status(500).json({ error: 'Failed to fetch payments' });\n    }\n  });\n\n  // Users/Customers API\n  app.get('/api/customers', requireAuth, async (req, res) => {\n    try {\n      const customers = await storage.getAllUsers();\n      res.json(customers);\n    } catch (error) {\n      console.error('Error fetching customers:', error);\n      res.status(500).json({ error: 'Failed to fetch customers' });\n    }\n  });\n\n  // Coupons API\n  app.get('/api/coupons', requireAuth, async (req, res) => {\n    try {\n      const coupons = await storage.getAllCoupons();\n      res.json(coupons);\n    } catch (error) {\n      console.error('Error fetching coupons:', error);\n      res.status(500).json({ error: 'Failed to fetch coupons' });\n    }\n  });\n\n  app.post('/api/coupons', requireAuth, async (req, res) => {\n    try {\n      const coupon = await storage.createCoupon(req.body);\n      res.status(201).json(coupon);\n    } catch (error) {\n      console.error('Error creating coupon:', error);\n      res.status(500).json({ error: 'Failed to create coupon' });\n    }\n  });\n\n  // Reconciliation API\n  app.post('/api/reconciliation/force', requireAuth, async (req, res) => {\n    try {\n      const result = await reconciliationService.forceReconciliation();\n      res.json(result);\n    } catch (error) {\n      console.error('Error forcing reconciliation:', error);\n      res.status(500).json({ error: 'Failed to force reconciliation' });\n    }\n  });\n\n  app.get('/api/reconciliation/status', requireAuth, async (req, res) => {\n    try {\n      const status = reconciliationService.getStatus();\n      res.json(status);\n    } catch (error) {\n      console.error('Error getting reconciliation status:', error);\n      res.status(500).json({ error: 'Failed to get reconciliation status' });\n    }\n  });\n\n  // Start reconciliation service\n  reconciliationService.start();\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9723},"server/seed.ts":{"content":"import { hashPassword } from './auth';\nimport { storage } from './storage';\n\nasync function seedDatabase() {\n  console.log('üå± Starting database seeding...');\n\n  try {\n    // Create default admin user\n    const existingAdmin = await storage.getAdminUserByEmail('admin@example.com');\n    if (!existingAdmin) {\n      const hashedPassword = await hashPassword('ChangeMe!2025');\n      await storage.createAdminUser({\n        email: 'admin@example.com',\n        password: hashedPassword,\n        name: 'Admin User',\n        role: 'admin',\n        mustChangePassword: true\n      });\n      console.log('‚úÖ Created default admin user (admin@example.com / ChangeMe!2025)');\n    } else {\n      console.log('‚ÑπÔ∏è  Admin user already exists');\n    }\n\n    // Create sample categories\n    const categories = [\n      { name: 'Electronics', slug: 'electronics', description: 'Phones, laptops, and electronic devices' },\n      { name: 'Fashion', slug: 'fashion', description: 'Clothing, shoes, and accessories' },\n      { name: 'Home & Garden', slug: 'home-garden', description: 'Furniture, appliances, and home decor' },\n      { name: 'Books', slug: 'books', description: 'Educational and entertainment books' },\n      { name: 'Sports', slug: 'sports', description: 'Sports equipment and fitness gear' }\n    ];\n\n    const createdCategories = [];\n    for (const categoryData of categories) {\n      const existingCategories = await storage.getAllCategories();\n      const exists = existingCategories.some(cat => cat.slug === categoryData.slug);\n      \n      if (!exists) {\n        const category = await storage.createCategory(categoryData);\n        createdCategories.push(category);\n        console.log(`‚úÖ Created category: ${category.name}`);\n      } else {\n        const existing = existingCategories.find(cat => cat.slug === categoryData.slug);\n        createdCategories.push(existing!);\n        console.log(`‚ÑπÔ∏è  Category already exists: ${categoryData.name}`);\n      }\n    }\n\n    // Create sample products\n    const products = [\n      {\n        title: 'iPhone 15 Pro Max',\n        sku: 'IPH-15PM-128',\n        description: 'Latest Apple smartphone with 128GB storage, advanced camera system, and A17 Pro chip',\n        priceGhs: '8500.00',\n        stock: 25,\n        categoryId: createdCategories.find(c => c.slug === 'electronics')?.id,\n        images: ['https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=400'],\n        tags: ['smartphone', 'apple', 'premium'],\n        isActive: true\n      },\n      {\n        title: 'Samsung Galaxy S24',\n        sku: 'SAM-S24-256',\n        description: 'Samsung flagship with 256GB storage, AI photography, and long-lasting battery',\n        priceGhs: '6800.00',\n        stock: 18,\n        categoryId: createdCategories.find(c => c.slug === 'electronics')?.id,\n        images: ['https://images.unsplash.com/photo-1610945265064-0e34e5519bbf?w=400'],\n        tags: ['smartphone', 'samsung', 'android'],\n        isActive: true\n      },\n      {\n        title: 'Premium Cotton T-Shirt',\n        sku: 'TSH-COT-001',\n        description: 'Comfortable everyday wear made from 100% organic cotton, available in multiple colors',\n        priceGhs: '45.00',\n        stock: 5,\n        categoryId: createdCategories.find(c => c.slug === 'fashion')?.id,\n        images: ['https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=400'],\n        tags: ['clothing', 'cotton', 'casual'],\n        isActive: true\n      },\n      {\n        title: 'Automatic Coffee Maker',\n        sku: 'COF-MKR-12C',\n        description: '12-cup programmable coffee maker with timer, auto-shutoff, and thermal carafe',\n        priceGhs: '320.00',\n        stock: 0,\n        categoryId: createdCategories.find(c => c.slug === 'home-garden')?.id,\n        images: ['https://images.unsplash.com/photo-1586023492125-27b2c045efd7?w=400'],\n        tags: ['appliance', 'coffee', 'kitchen'],\n        isActive: false\n      },\n      {\n        title: 'JavaScript Programming Guide',\n        sku: 'BOK-JS-001',\n        description: 'Complete guide to modern JavaScript programming with practical examples and projects',\n        priceGhs: '85.00',\n        stock: 50,\n        categoryId: createdCategories.find(c => c.slug === 'books')?.id,\n        images: ['https://images.unsplash.com/photo-1544716278-ca5e3f4abd8c?w=400'],\n        tags: ['programming', 'javascript', 'education'],\n        isActive: true\n      }\n    ];\n\n    const existingProducts = await storage.getAllProducts();\n    for (const productData of products) {\n      const exists = existingProducts.some(p => p.sku === productData.sku);\n      if (!exists) {\n        await storage.createProduct(productData);\n        console.log(`‚úÖ Created product: ${productData.title}`);\n      } else {\n        console.log(`‚ÑπÔ∏è  Product already exists: ${productData.title}`);\n      }\n    }\n\n    // Create sample coupons\n    const coupons = [\n      {\n        code: 'WELCOME10',\n        name: 'Welcome Discount',\n        description: 'Get 10% off your first order',\n        type: 'percent',\n        value: '10',\n        minOrderAmount: '50.00',\n        maxUses: 100,\n        isActive: true,\n        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days from now\n      },\n      {\n        code: 'SAVE50',\n        name: 'Fixed Discount',\n        description: 'Save GHS 50 on orders over GHS 300',\n        type: 'fixed',\n        value: '50.00',\n        minOrderAmount: '300.00',\n        maxUses: 50,\n        isActive: true,\n        expiresAt: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000) // 60 days from now\n      }\n    ];\n\n    const existingCoupons = await storage.getAllCoupons();\n    for (const couponData of coupons) {\n      const exists = existingCoupons.some(c => c.code === couponData.code);\n      if (!exists) {\n        await storage.createCoupon(couponData);\n        console.log(`‚úÖ Created coupon: ${couponData.code}`);\n      } else {\n        console.log(`‚ÑπÔ∏è  Coupon already exists: ${couponData.code}`);\n      }\n    }\n\n    console.log('üéâ Database seeding completed successfully!');\n    console.log('');\n    console.log('üìã Summary:');\n    console.log('- Admin user: admin@example.com / ChangeMe!2025');\n    console.log('- Categories: 5 created');\n    console.log('- Products: 5 created');\n    console.log('- Coupons: 2 created');\n    console.log('');\n    console.log('‚ö†Ô∏è  Remember to change the admin password on first login!');\n\n  } catch (error) {\n    console.error('‚ùå Error seeding database:', error);\n    throw error;\n  }\n}\n\n// Run seeding if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedDatabase()\n    .then(() => process.exit(0))\n    .catch((error) => {\n      console.error(error);\n      process.exit(1);\n    });\n}\n\nexport { seedDatabase };\n","size_bytes":6788},"server/storage.ts":{"content":"import { \n  adminUsers, \n  users, \n  categories, \n  products, \n  orders, \n  orderItems, \n  payments, \n  coupons, \n  auditLogs,\n  type AdminUser, \n  type InsertAdminUser,\n  type User, \n  type InsertUser,\n  type Category,\n  type InsertCategory,\n  type Product,\n  type InsertProduct,\n  type Order,\n  type InsertOrder,\n  type OrderItem,\n  type InsertOrderItem,\n  type Payment,\n  type InsertPayment,\n  type Coupon,\n  type InsertCoupon,\n  type AuditLog,\n  type InsertAuditLog\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, sql, count } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { type SessionStore } from \"express-session\";\nimport { pool } from \"./db\";\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  sessionStore: SessionStore;\n  \n  // Admin Users\n  getAdminUser(id: string): Promise<AdminUser | undefined>;\n  getAdminUserByEmail(email: string): Promise<AdminUser | undefined>;\n  createAdminUser(user: InsertAdminUser): Promise<AdminUser>;\n  updateAdminUser(id: string, updates: Partial<InsertAdminUser>): Promise<AdminUser | undefined>;\n  \n  // Telegram Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByTelegramId(telegramId: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  \n  // Categories\n  getAllCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, updates: Partial<InsertCategory>): Promise<Category | undefined>;\n  deleteCategory(id: string): Promise<boolean>;\n  \n  // Products\n  getAllProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  getProductsByCategoryId(categoryId: string): Promise<Product[]>;\n  searchProducts(query: string): Promise<Product[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, updates: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n  updateProductStock(id: string, quantity: number): Promise<Product | undefined>;\n  \n  // Orders\n  getAllOrders(): Promise<Order[]>;\n  getOrder(id: string): Promise<Order | undefined>;\n  getOrdersByUserId(userId: string): Promise<Order[]>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: string, updates: Partial<InsertOrder>): Promise<Order | undefined>;\n  generateOrderNumber(): Promise<string>;\n  \n  // Order Items\n  getOrderItems(orderId: string): Promise<OrderItem[]>;\n  createOrderItem(item: InsertOrderItem): Promise<OrderItem>;\n  deleteOrderItems(orderId: string): Promise<boolean>;\n  \n  // Payments\n  getAllPayments(): Promise<Payment[]>;\n  getPayment(id: string): Promise<Payment | undefined>;\n  getPaymentByIdempotencyKey(key: string): Promise<Payment | undefined>;\n  getPaymentsByOrderId(orderId: string): Promise<Payment[]>;\n  getPendingPayments(): Promise<Payment[]>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  updatePayment(id: string, updates: Partial<InsertPayment>): Promise<Payment | undefined>;\n  \n  // Coupons\n  getAllCoupons(): Promise<Coupon[]>;\n  getCoupon(id: string): Promise<Coupon | undefined>;\n  getCouponByCode(code: string): Promise<Coupon | undefined>;\n  createCoupon(coupon: InsertCoupon): Promise<Coupon>;\n  updateCoupon(id: string, updates: Partial<InsertCoupon>): Promise<Coupon | undefined>;\n  deleteCoupon(id: string): Promise<boolean>;\n  \n  // Analytics\n  getDashboardMetrics(): Promise<{\n    totalOrders: number;\n    revenue: string;\n    customers: number;\n    mtnPayments: number;\n  }>;\n  \n  // Audit Logs\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: SessionStore;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    });\n  }\n\n  // Admin Users\n  async getAdminUser(id: string): Promise<AdminUser | undefined> {\n    const [user] = await db.select().from(adminUsers).where(eq(adminUsers.id, id));\n    return user || undefined;\n  }\n\n  async getAdminUserByEmail(email: string): Promise<AdminUser | undefined> {\n    const [user] = await db.select().from(adminUsers).where(eq(adminUsers.email, email));\n    return user || undefined;\n  }\n\n  async createAdminUser(user: InsertAdminUser): Promise<AdminUser> {\n    const [newUser] = await db\n      .insert(adminUsers)\n      .values(user)\n      .returning();\n    return newUser;\n  }\n\n  async updateAdminUser(id: string, updates: Partial<InsertAdminUser>): Promise<AdminUser | undefined> {\n    const [updated] = await db\n      .update(adminUsers)\n      .set({ ...updates, updatedAt: sql`now()` })\n      .where(eq(adminUsers.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  // Telegram Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByTelegramId(telegramId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.telegramId, telegramId));\n    return user || undefined;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const [newUser] = await db\n      .insert(users)\n      .values(user)\n      .returning();\n    return newUser;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const [updated] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: sql`now()` })\n      .where(eq(users.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  // Categories\n  async getAllCategories(): Promise<Category[]> {\n    return await db.select().from(categories).where(eq(categories.isActive, true));\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db\n      .insert(categories)\n      .values(category)\n      .returning();\n    return newCategory;\n  }\n\n  async updateCategory(id: string, updates: Partial<InsertCategory>): Promise<Category | undefined> {\n    const [updated] = await db\n      .update(categories)\n      .set({ ...updates, updatedAt: sql`now()` })\n      .where(eq(categories.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteCategory(id: string): Promise<boolean> {\n    const result = await db\n      .update(categories)\n      .set({ isActive: false, updatedAt: sql`now()` })\n      .where(eq(categories.id, id));\n    return result.rowCount! > 0;\n  }\n\n  // Products\n  async getAllProducts(): Promise<Product[]> {\n    return await db.select().from(products).orderBy(desc(products.createdAt));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async getProductsByCategoryId(categoryId: string): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(and(eq(products.categoryId, categoryId), eq(products.isActive, true)));\n  }\n\n  async searchProducts(query: string): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(\n        and(\n          eq(products.isActive, true),\n          sql`${products.title} ILIKE ${`%${query}%`} OR ${products.sku} ILIKE ${`%${query}%`}`\n        )\n      );\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db\n      .insert(products)\n      .values(product)\n      .returning();\n    return newProduct;\n  }\n\n  async updateProduct(id: string, updates: Partial<InsertProduct>): Promise<Product | undefined> {\n    const [updated] = await db\n      .update(products)\n      .set({ ...updates, updatedAt: sql`now()` })\n      .where(eq(products.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    const result = await db\n      .update(products)\n      .set({ isActive: false, updatedAt: sql`now()` })\n      .where(eq(products.id, id));\n    return result.rowCount! > 0;\n  }\n\n  async updateProductStock(id: string, quantity: number): Promise<Product | undefined> {\n    const [updated] = await db\n      .update(products)\n      .set({ stock: sql`${products.stock} + ${quantity}`, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  // Orders\n  async getAllOrders(): Promise<Order[]> {\n    return await db.select().from(orders).orderBy(desc(orders.createdAt));\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    return order || undefined;\n  }\n\n  async getOrdersByUserId(userId: string): Promise<Order[]> {\n    return await db\n      .select()\n      .from(orders)\n      .where(eq(orders.userId, userId))\n      .orderBy(desc(orders.createdAt));\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const orderNumber = await this.generateOrderNumber();\n    const [newOrder] = await db\n      .insert(orders)\n      .values({ ...order, orderNumber })\n      .returning();\n    return newOrder;\n  }\n\n  async updateOrder(id: string, updates: Partial<InsertOrder>): Promise<Order | undefined> {\n    const [updated] = await db\n      .update(orders)\n      .set({ ...updates, updatedAt: sql`now()` })\n      .where(eq(orders.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async generateOrderNumber(): Promise<string> {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    \n    const [{ value: count }] = await db\n      .select({ value: sql<number>`count(*)` })\n      .from(orders)\n      .where(gte(orders.createdAt, new Date(year, now.getMonth(), now.getDate())));\n    \n    const sequence = String(count + 1).padStart(3, '0');\n    return `ORD-${year}${month}${day}-${sequence}`;\n  }\n\n  // Order Items\n  async getOrderItems(orderId: string): Promise<OrderItem[]> {\n    return await db.select().from(orderItems).where(eq(orderItems.orderId, orderId));\n  }\n\n  async createOrderItem(item: InsertOrderItem): Promise<OrderItem> {\n    const [newItem] = await db\n      .insert(orderItems)\n      .values(item)\n      .returning();\n    return newItem;\n  }\n\n  async deleteOrderItems(orderId: string): Promise<boolean> {\n    const result = await db.delete(orderItems).where(eq(orderItems.orderId, orderId));\n    return result.rowCount! > 0;\n  }\n\n  // Payments\n  async getAllPayments(): Promise<Payment[]> {\n    return await db.select().from(payments).orderBy(desc(payments.createdAt));\n  }\n\n  async getPayment(id: string): Promise<Payment | undefined> {\n    const [payment] = await db.select().from(payments).where(eq(payments.id, id));\n    return payment || undefined;\n  }\n\n  async getPaymentByIdempotencyKey(key: string): Promise<Payment | undefined> {\n    const [payment] = await db.select().from(payments).where(eq(payments.idempotencyKey, key));\n    return payment || undefined;\n  }\n\n  async getPaymentsByOrderId(orderId: string): Promise<Payment[]> {\n    return await db.select().from(payments).where(eq(payments.orderId, orderId));\n  }\n\n  async getPendingPayments(): Promise<Payment[]> {\n    return await db\n      .select()\n      .from(payments)\n      .where(eq(payments.status, 'PENDING'));\n  }\n\n  async createPayment(payment: InsertPayment): Promise<Payment> {\n    const [newPayment] = await db\n      .insert(payments)\n      .values(payment)\n      .returning();\n    return newPayment;\n  }\n\n  async updatePayment(id: string, updates: Partial<InsertPayment>): Promise<Payment | undefined> {\n    const [updated] = await db\n      .update(payments)\n      .set({ ...updates, updatedAt: sql`now()` })\n      .where(eq(payments.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  // Coupons\n  async getAllCoupons(): Promise<Coupon[]> {\n    return await db.select().from(coupons).orderBy(desc(coupons.createdAt));\n  }\n\n  async getCoupon(id: string): Promise<Coupon | undefined> {\n    const [coupon] = await db.select().from(coupons).where(eq(coupons.id, id));\n    return coupon || undefined;\n  }\n\n  async getCouponByCode(code: string): Promise<Coupon | undefined> {\n    const [coupon] = await db.select().from(coupons).where(eq(coupons.code, code));\n    return coupon || undefined;\n  }\n\n  async createCoupon(coupon: InsertCoupon): Promise<Coupon> {\n    const [newCoupon] = await db\n      .insert(coupons)\n      .values(coupon)\n      .returning();\n    return newCoupon;\n  }\n\n  async updateCoupon(id: string, updates: Partial<InsertCoupon>): Promise<Coupon | undefined> {\n    const [updated] = await db\n      .update(coupons)\n      .set({ ...updates, updatedAt: sql`now()` })\n      .where(eq(coupons.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteCoupon(id: string): Promise<boolean> {\n    const result = await db\n      .update(coupons)\n      .set({ isActive: false, updatedAt: sql`now()` })\n      .where(eq(coupons.id, id));\n    return result.rowCount! > 0;\n  }\n\n  // Analytics\n  async getDashboardMetrics() {\n    const [ordersCount] = await db\n      .select({ value: count() })\n      .from(orders);\n\n    const [revenueSum] = await db\n      .select({ value: sql<string>`COALESCE(SUM(${orders.totalGhs}), 0)` })\n      .from(orders)\n      .where(eq(orders.status, 'PAID'));\n\n    const [customersCount] = await db\n      .select({ value: count() })\n      .from(users);\n\n    const [mtnPaymentsCount] = await db\n      .select({ value: count() })\n      .from(payments)\n      .where(eq(payments.status, 'SUCCESS'));\n\n    return {\n      totalOrders: ordersCount.value,\n      revenue: revenueSum.value || '0',\n      customers: customersCount.value,\n      mtnPayments: mtnPaymentsCount.value\n    };\n  }\n\n  // Audit Logs\n  async createAuditLog(log: InsertAuditLog): Promise<AuditLog> {\n    const [newLog] = await db\n      .insert(auditLogs)\n      .values(log)\n      .returning();\n    return newLog;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14386},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, decimal, boolean, json, uuid, pgEnum } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const orderStatusEnum = pgEnum('order_status', [\n  'PENDING', 'PAID', 'PACKED', 'SHIPPED', 'DELIVERED', 'CANCELLED', 'REFUNDED'\n]);\n\nexport const paymentStatusEnum = pgEnum('payment_status', [\n  'PENDING', 'SUCCESS', 'FAILED', 'TIMEOUT', 'CANCELLED'\n]);\n\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'staff']);\n\n// Admin Users Table\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default('admin'),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  mustChangePassword: boolean(\"must_change_password\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Telegram Users Table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  telegramId: text(\"telegram_id\").notNull().unique(),\n  username: text(\"username\"),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  phone: text(\"phone\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Categories Table\nexport const categories = pgTable(\"categories\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Products Table\nexport const products = pgTable(\"products\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  sku: text(\"sku\").notNull().unique(),\n  description: text(\"description\"),\n  priceGhs: decimal(\"price_ghs\", { precision: 10, scale: 2 }).notNull(),\n  stock: integer(\"stock\").notNull().default(0),\n  images: json(\"images\").$type<string[]>().default([]),\n  tags: json(\"tags\").$type<string[]>().default([]),\n  variants: json(\"variants\").$type<Record<string, any>>().default({}),\n  metadata: json(\"metadata\").$type<Record<string, any>>().default({}),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  categoryId: uuid(\"category_id\").references(() => categories.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Orders Table\nexport const orders = pgTable(\"orders\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderNumber: text(\"order_number\").notNull().unique(),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  status: orderStatusEnum(\"status\").notNull().default('PENDING'),\n  totalGhs: decimal(\"total_ghs\", { precision: 10, scale: 2 }).notNull(),\n  shippingGhs: decimal(\"shipping_ghs\", { precision: 10, scale: 2 }).notNull().default('10.00'),\n  address: json(\"address\").$type<Record<string, any>>(),\n  customerPhone: text(\"customer_phone\"),\n  notes: text(\"notes\"),\n  trackingNumber: text(\"tracking_number\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Order Items Table\nexport const orderItems = pgTable(\"order_items\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: uuid(\"order_id\").references(() => orders.id).notNull(),\n  productId: uuid(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  priceGhs: decimal(\"price_ghs\", { precision: 10, scale: 2 }).notNull(),\n  variant: json(\"variant\").$type<Record<string, any>>().default({}),\n});\n\n// Payments Table\nexport const payments = pgTable(\"payments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: uuid(\"order_id\").references(() => orders.id).notNull(),\n  provider: text(\"provider\").notNull().default('mtn_momo'),\n  amountGhs: decimal(\"amount_ghs\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").notNull().default('GHS'),\n  status: paymentStatusEnum(\"status\").notNull().default('PENDING'),\n  providerReference: text(\"provider_reference\"),\n  externalId: text(\"external_id\").notNull(),\n  customerPhone: text(\"customer_phone\").notNull(),\n  rawPayload: json(\"raw_payload\").$type<Record<string, any>>().default({}),\n  webhookPayload: json(\"webhook_payload\").$type<Record<string, any>>().default({}),\n  idempotencyKey: text(\"idempotency_key\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  expiresAt: timestamp(\"expires_at\"),\n});\n\n// Coupons Table\nexport const coupons = pgTable(\"coupons\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull(), // 'percent' or 'fixed'\n  value: decimal(\"value\", { precision: 10, scale: 2 }).notNull(),\n  minOrderAmount: decimal(\"min_order_amount\", { precision: 10, scale: 2 }),\n  maxUses: integer(\"max_uses\"),\n  usedCount: integer(\"used_count\").notNull().default(0),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  startsAt: timestamp(\"starts_at\"),\n  expiresAt: timestamp(\"expires_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Audit Logs Table\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  action: text(\"action\").notNull(),\n  entityType: text(\"entity_type\").notNull(),\n  entityId: text(\"entity_id\").notNull(),\n  adminUserId: uuid(\"admin_user_id\").references(() => adminUsers.id),\n  oldValues: json(\"old_values\").$type<Record<string, any>>().default({}),\n  newValues: json(\"new_values\").$type<Record<string, any>>().default({}),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const adminUsersRelations = relations(adminUsers, ({ many }) => ({\n  auditLogs: many(auditLogs),\n}));\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  orders: many(orders),\n}));\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  products: many(products),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  orderItems: many(orderItems),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  user: one(users, {\n    fields: [orders.userId],\n    references: [users.id],\n  }),\n  orderItems: many(orderItems),\n  payments: many(payments),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, {\n    fields: [orderItems.orderId],\n    references: [orders.id],\n  }),\n  product: one(products, {\n    fields: [orderItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const paymentsRelations = relations(payments, ({ one }) => ({\n  order: one(orders, {\n    fields: [payments.orderId],\n    references: [orders.id],\n  }),\n}));\n\nexport const auditLogsRelations = relations(auditLogs, ({ one }) => ({\n  adminUser: one(adminUsers, {\n    fields: [auditLogs.adminUserId],\n    references: [adminUsers.id],\n  }),\n}));\n\n// Insert Schemas\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  orderNumber: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCouponSchema = createInsertSchema(coupons).omit({\n  id: true,\n  usedCount: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type Coupon = typeof coupons.$inferSelect;\nexport type InsertCoupon = z.infer<typeof insertCouponSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\n","size_bytes":10079},"tests/auth.test.ts":{"content":"import { describe, test, expect, beforeEach } from '@jest/globals';\nimport request from 'supertest';\nimport express from 'express';\nimport { setupAuth, hashPassword } from '../server/auth';\nimport { storage } from '../server/storage';\n\nconst app = express();\napp.use(express.json());\nsetupAuth(app);\n\ndescribe('Authentication', () => {\n  beforeEach(async () => {\n    // Create test admin user\n    const hashedPassword = await hashPassword('testpassword');\n    await storage.createAdminUser({\n      email: 'test@example.com',\n      password: hashedPassword,\n      name: 'Test User',\n      role: 'admin',\n      mustChangePassword: false\n    });\n  });\n\n  test('should register new admin user', async () => {\n    const response = await request(app)\n      .post('/api/register')\n      .send({\n        email: 'newuser@example.com',\n        password: 'password123',\n        name: 'New User'\n      });\n\n    expect(response.status).toBe(201);\n    expect(response.body).toHaveProperty('id');\n    expect(response.body.email).toBe('newuser@example.com');\n    expect(response.body.name).toBe('New User');\n  });\n\n  test('should not register user with existing email', async () => {\n    const response = await request(app)\n      .post('/api/register')\n      .send({\n        email: 'test@example.com',\n        password: 'password123',\n        name: 'Duplicate User'\n      });\n\n    expect(response.status).toBe(400);\n    expect(response.body.message).toBe('Email already exists');\n  });\n\n  test('should login with valid credentials', async () => {\n    const response = await request(app)\n      .post('/api/login')\n      .send({\n        email: 'test@example.com',\n        password: 'testpassword'\n      });\n\n    expect(response.status).toBe(200);\n    expect(response.body).toHaveProperty('id');\n    expect(response.body.email).toBe('test@example.com');\n  });\n\n  test('should not login with invalid credentials', async () => {\n    const response = await request(app)\n      .post('/api/login')\n      .send({\n        email: 'test@example.com',\n        password: 'wrongpassword'\n      });\n\n    expect(response.status).toBe(401);\n    expect(response.body.message).toBe('Invalid credentials');\n  });\n\n  test('should return 401 for protected routes without auth', async () => {\n    const response = await request(app).get('/api/user');\n    expect(response.status).toBe(401);\n  });\n\n  test('should change password with valid current password', async () => {\n    // Login first\n    const loginResponse = await request(app)\n      .post('/api/login')\n      .send({\n        email: 'test@example.com',\n        password: 'testpassword'\n      });\n\n    const cookie = loginResponse.headers['set-cookie'];\n\n    const response = await request(app)\n      .post('/api/change-password')\n      .set('Cookie', cookie)\n      .send({\n        currentPassword: 'testpassword',\n        newPassword: 'newpassword123'\n      });\n\n    expect(response.status).toBe(200);\n    expect(response.body.message).toBe('Password changed successfully');\n  });\n});\n","size_bytes":3003},"tests/mtn-momo.test.ts":{"content":"import { describe, test, expect, jest, beforeEach } from '@jest/globals';\nimport { mtnMomoService } from '../server/services/mtn-momo';\n\n// Mock fetch globally\nglobal.fetch = jest.fn() as jest.MockedFunction<typeof fetch>;\n\ndescribe('MTN MoMo Service', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  test('should initiate collection request', async () => {\n    const mockToken = 'mock-access-token';\n    const mockReferenceId = '550e8400-e29b-41d4-a716-446655440000';\n\n    // Mock token request\n    (fetch as jest.MockedFunction<typeof fetch>)\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({\n          access_token: mockToken,\n          token_type: 'Bearer',\n          expires_in: 3600\n        })\n      } as Response);\n\n    // Mock collection request\n    (fetch as jest.MockedFunction<typeof fetch>)\n      .mockResolvedValueOnce({\n        status: 202,\n        statusText: 'Accepted'\n      } as Response);\n\n    const result = await mtnMomoService.initiateCollection(\n      '125.50',\n      '+233244123456',\n      'order:12345:uuid',\n      'Test payment'\n    );\n\n    expect(result.success).toBe(true);\n    expect(result.referenceId).toBeDefined();\n  });\n\n  test('should validate Ghana phone numbers', () => {\n    expect(() => mtnMomoService.formatPhoneNumber('+233244123456')).not.toThrow();\n    expect(() => mtnMomoService.formatPhoneNumber('0244123456')).not.toThrow();\n    expect(mtnMomoService.formatPhoneNumber('0244123456')).toBe('+233244123456');\n    \n    expect(() => mtnMomoService.formatPhoneNumber('1234567890')).toThrow();\n    expect(() => mtnMomoService.formatPhoneNumber('+1234567890')).toThrow();\n  });\n\n  test('should validate webhook signatures', () => {\n    const payload = '{\"test\": \"data\"}';\n    const secret = 'webhook-secret';\n    \n    // Create valid signature\n    const crypto = require('crypto');\n    const signature = crypto.createHmac('sha256', secret).update(payload).digest('hex');\n    \n    const isValid = mtnMomoService.validateWebhookSignature(payload, signature);\n    expect(isValid).toBe(true);\n    \n    const isInvalid = mtnMomoService.validateWebhookSignature(payload, 'invalid-signature');\n    expect(isInvalid).toBe(false);\n  });\n\n  test('should generate idempotency keys', () => {\n    const key1 = mtnMomoService.generateIdempotencyKey('order123');\n    const key2 = mtnMomoService.generateIdempotencyKey('order123');\n    \n    expect(key1).toMatch(/^order:order123:[0-9a-f-]{36}$/);\n    expect(key2).toMatch(/^order:order123:[0-9a-f-]{36}$/);\n    expect(key1).not.toBe(key2); // Should be unique\n  });\n\n  test('should check payment status', async () => {\n    const mockToken = 'mock-access-token';\n    const referenceId = '550e8400-e29b-41d4-a716-446655440000';\n\n    // Mock token request\n    (fetch as jest.MockedFunction<typeof fetch>)\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({\n          access_token: mockToken,\n          token_type: 'Bearer',\n          expires_in: 3600\n        })\n      } as Response);\n\n    // Mock status check\n    (fetch as jest.MockedFunction<typeof fetch>)\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({\n          status: 'SUCCESSFUL',\n          financialTransactionId: '1234567890'\n        })\n      } as Response);\n\n    const result = await mtnMomoService.checkPaymentStatus(referenceId);\n    \n    expect(result.status).toBe('SUCCESSFUL');\n    expect(result.financialTransactionId).toBe('1234567890');\n  });\n});\n","size_bytes":3514},"tests/setup.ts":{"content":"import { beforeAll, afterAll, beforeEach } from '@jest/globals';\nimport { db } from '../server/db';\n\nbeforeAll(async () => {\n  // Set test environment\n  process.env.NODE_ENV = 'test';\n  process.env.DATABASE_URL = process.env.TEST_DATABASE_URL || 'postgresql://test:test@localhost:5432/ecombot_test';\n  \n  // Clear database\n  await clearDatabase();\n});\n\nafterAll(async () => {\n  // Close database connection\n  await db.$disconnect();\n});\n\nbeforeEach(async () => {\n  // Clear database before each test\n  await clearDatabase();\n});\n\nasync function clearDatabase() {\n  // Clear all tables in the correct order (respecting foreign keys)\n  const tables = [\n    'audit_logs',\n    'order_items',\n    'payments',\n    'orders',\n    'products',\n    'categories',\n    'coupons',\n    'users',\n    'admin_users'\n  ];\n\n  for (const table of tables) {\n    await db.$executeRawUnsafe(`TRUNCATE TABLE \"${table}\" CASCADE`);\n  }\n}\n","size_bytes":911},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport NotFound from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth-page\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Products from \"@/pages/products\";\nimport Orders from \"@/pages/orders\";\nimport Payments from \"@/pages/payments\";\nimport Customers from \"@/pages/customers\";\nimport Analytics from \"@/pages/analytics\";\nimport Coupons from \"@/pages/coupons\";\nimport Settings from \"@/pages/settings\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={Dashboard} />\n      <ProtectedRoute path=\"/dashboard\" component={Dashboard} />\n      <ProtectedRoute path=\"/products\" component={Products} />\n      <ProtectedRoute path=\"/orders\" component={Orders} />\n      <ProtectedRoute path=\"/payments\" component={Payments} />\n      <ProtectedRoute path=\"/customers\" component={Customers} />\n      <ProtectedRoute path=\"/analytics\" component={Analytics} />\n      <ProtectedRoute path=\"/coupons\" component={Coupons} />\n      <ProtectedRoute path=\"/settings\" component={Settings} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1760},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/mtn-momo.ts":{"content":"import crypto from 'crypto';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface MTNCollectionRequest {\n  amount: string;\n  currency: string;\n  externalId: string;\n  payer: {\n    partyIdType: string;\n    partyId: string;\n  };\n  payerMessage: string;\n  payeeNote: string;\n}\n\ninterface MTNCollectionResponse {\n  referenceId: string;\n  status: string;\n  reason?: string;\n}\n\ninterface MTNTokenResponse {\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n}\n\nclass MTNMomoService {\n  private clientId: string;\n  private clientSecret: string;\n  private apiBaseUrl: string;\n  private env: string;\n  private callbackSecret: string;\n  private cachedToken: string | null = null;\n  private tokenExpiry: Date | null = null;\n\n  constructor() {\n    this.clientId = process.env.MTN_CLIENT_ID || '';\n    this.clientSecret = process.env.MTN_CLIENT_SECRET || '';\n    this.apiBaseUrl = process.env.MTN_API_BASE_URL || 'https://sandbox.momodeveloper.mtn.com';\n    this.env = process.env.MTN_ENV || 'sandbox';\n    this.callbackSecret = process.env.MTN_CALLBACK_SECRET || 'default-webhook-secret';\n\n    if (!this.clientId || !this.clientSecret) {\n      console.warn('MTN MoMo credentials not configured. Payment functionality will be limited.');\n    }\n  }\n\n  private async getAuthToken(): Promise<string> {\n    // Return cached token if still valid\n    if (this.cachedToken && this.tokenExpiry && new Date() < this.tokenExpiry) {\n      return this.cachedToken;\n    }\n\n    try {\n      const credentials = Buffer.from(`${this.clientId}:${this.clientSecret}`).toString('base64');\n      \n      const response = await fetch(`${this.apiBaseUrl}/collection/token/`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Basic ${credentials}`,\n          'Content-Type': 'application/json',\n          'Ocp-Apim-Subscription-Key': this.clientId\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to get MTN token: ${response.statusText}`);\n      }\n\n      const tokenData: MTNTokenResponse = await response.json();\n      \n      // Cache token with expiry\n      this.cachedToken = tokenData.access_token;\n      this.tokenExpiry = new Date(Date.now() + (tokenData.expires_in - 300) * 1000); // Refresh 5 minutes early\n      \n      return this.cachedToken;\n    } catch (error) {\n      console.error('Error getting MTN auth token:', error);\n      throw error;\n    }\n  }\n\n  async initiateCollection(\n    amount: string,\n    customerPhone: string,\n    externalId: string,\n    description: string = 'EcomBot Purchase'\n  ): Promise<{ referenceId: string; success: boolean; error?: string }> {\n    try {\n      const token = await this.getAuthToken();\n      const referenceId = uuidv4();\n      \n      // Validate phone number format (Ghana: +233XXXXXXXXX or 0XXXXXXXXX)\n      const phoneRegex = /^(?:\\+233|0)\\d{9}$/;\n      if (!phoneRegex.test(customerPhone)) {\n        throw new Error('Invalid phone number format. Use +233XXXXXXXXX or 0XXXXXXXXX');\n      }\n\n      // Normalize phone number to international format\n      let normalizedPhone = customerPhone;\n      if (customerPhone.startsWith('0')) {\n        normalizedPhone = '+233' + customerPhone.substring(1);\n      }\n\n      const requestData: MTNCollectionRequest = {\n        amount,\n        currency: 'EUR', // MTN sandbox uses EUR, production would use GHS\n        externalId,\n        payer: {\n          partyIdType: 'MSISDN',\n          partyId: normalizedPhone\n        },\n        payerMessage: `Payment for ${description}`,\n        payeeNote: `EcomBot order payment - ${externalId}`\n      };\n\n      const response = await fetch(`${this.apiBaseUrl}/collection/v1_0/requesttopay`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n          'X-Reference-Id': referenceId,\n          'X-Target-Environment': this.env,\n          'Ocp-Apim-Subscription-Key': this.clientId\n        },\n        body: JSON.stringify(requestData)\n      });\n\n      if (response.status === 202) {\n        return { referenceId, success: true };\n      } else {\n        const errorText = await response.text();\n        console.error('MTN Collection Request Failed:', response.status, errorText);\n        return { \n          referenceId, \n          success: false, \n          error: `Payment request failed: ${response.statusText}` \n        };\n      }\n    } catch (error) {\n      console.error('Error initiating MTN collection:', error);\n      return { \n        referenceId: '', \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      };\n    }\n  }\n\n  async checkPaymentStatus(referenceId: string): Promise<{\n    status: string;\n    reason?: string;\n    financialTransactionId?: string;\n  }> {\n    try {\n      const token = await this.getAuthToken();\n      \n      const response = await fetch(`${this.apiBaseUrl}/collection/v1_0/requesttopay/${referenceId}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'X-Target-Environment': this.env,\n          'Ocp-Apim-Subscription-Key': this.clientId\n        }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        return {\n          status: data.status,\n          reason: data.reason,\n          financialTransactionId: data.financialTransactionId\n        };\n      } else {\n        throw new Error(`Failed to check payment status: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Error checking payment status:', error);\n      return { status: 'FAILED', reason: 'Status check failed' };\n    }\n  }\n\n  validateWebhookSignature(payload: string, signature: string): boolean {\n    if (!signature || !this.callbackSecret) {\n      console.warn('Missing webhook signature or secret');\n      return false;\n    }\n\n    try {\n      const expectedSignature = crypto\n        .createHmac('sha256', this.callbackSecret)\n        .update(payload)\n        .digest('hex');\n      \n      return crypto.timingSafeEqual(\n        Buffer.from(signature, 'hex'),\n        Buffer.from(expectedSignature, 'hex')\n      );\n    } catch (error) {\n      console.error('Error validating webhook signature:', error);\n      return false;\n    }\n  }\n\n  generateIdempotencyKey(orderId: string): string {\n    return `order:${orderId}:${uuidv4()}`;\n  }\n\n  formatPhoneNumber(phone: string): string {\n    // Validate and format Ghana phone numbers\n    const phoneRegex = /^(?:\\+233|0)(\\d{9})$/;\n    const match = phone.match(phoneRegex);\n    \n    if (!match) {\n      throw new Error('Invalid Ghana phone number format');\n    }\n    \n    return `+233${match[1]}`;\n  }\n\n  getPaymentTimeoutMinutes(): number {\n    return parseInt(process.env.RECONCILE_TIMEOUT_MINUTES || '10');\n  }\n\n  getWebhookCallbackUrl(): string {\n    const domains = process.env.REPLIT_DOMAINS?.split(',') || ['localhost:5000'];\n    const domain = domains[0];\n    return `https://${domain}/api/webhooks/mtn-callback`;\n  }\n}\n\nexport const mtnMomoService = new MTNMomoService();\n","size_bytes":7035},"server/services/reconciliation.ts":{"content":"import cron from 'node-cron';\nimport { storage } from '../storage';\nimport { mtnMomoService } from './mtn-momo';\n\nclass ReconciliationService {\n  private isRunning = false;\n  private cronExpression: string;\n\n  constructor() {\n    this.cronExpression = process.env.RECONCILE_CRON || '*/15 * * * *'; // Every 15 minutes\n  }\n\n  start() {\n    console.log(`Starting reconciliation service with schedule: ${this.cronExpression}`);\n    \n    cron.schedule(this.cronExpression, async () => {\n      if (this.isRunning) {\n        console.log('Reconciliation already running, skipping...');\n        return;\n      }\n\n      await this.runReconciliation();\n    });\n\n    // Run once on startup\n    setTimeout(() => this.runReconciliation(), 5000);\n  }\n\n  async runReconciliation() {\n    if (this.isRunning) return;\n    \n    this.isRunning = true;\n    const startTime = Date.now();\n    \n    try {\n      console.log('Starting payment reconciliation...');\n      \n      const pendingPayments = await storage.getPendingPayments();\n      const timeoutMinutes = mtnMomoService.getPaymentTimeoutMinutes();\n      const timeoutMs = timeoutMinutes * 60 * 1000;\n      \n      let processed = 0;\n      let updated = 0;\n      let timedOut = 0;\n\n      for (const payment of pendingPayments) {\n        processed++;\n        \n        try {\n          // Check if payment has timed out\n          const paymentAge = Date.now() - payment.createdAt.getTime();\n          if (paymentAge > timeoutMs) {\n            await storage.updatePayment(payment.id, {\n              status: 'TIMEOUT'\n            });\n            \n            // Update order status\n            await storage.updateOrder(payment.orderId, {\n              status: 'CANCELLED'\n            });\n            \n            timedOut++;\n            console.log(`Payment ${payment.id} timed out after ${Math.round(paymentAge / 60000)} minutes`);\n            continue;\n          }\n\n          // Check payment status with MTN\n          if (payment.providerReference) {\n            const statusResult = await mtnMomoService.checkPaymentStatus(payment.providerReference);\n            \n            if (statusResult.status === 'SUCCESSFUL') {\n              await storage.updatePayment(payment.id, {\n                status: 'SUCCESS',\n                webhookPayload: { \n                  reconciliation: true,\n                  mtnStatus: statusResult,\n                  timestamp: new Date().toISOString()\n                }\n              });\n\n              // Update order status\n              await storage.updateOrder(payment.orderId, {\n                status: 'PAID'\n              });\n\n              updated++;\n              console.log(`Payment ${payment.id} reconciled as successful`);\n              \n            } else if (statusResult.status === 'FAILED') {\n              await storage.updatePayment(payment.id, {\n                status: 'FAILED',\n                webhookPayload: { \n                  reconciliation: true,\n                  mtnStatus: statusResult,\n                  timestamp: new Date().toISOString()\n                }\n              });\n\n              // Update order status\n              await storage.updateOrder(payment.orderId, {\n                status: 'CANCELLED'\n              });\n\n              updated++;\n              console.log(`Payment ${payment.id} reconciled as failed: ${statusResult.reason}`);\n            }\n            // If status is still PENDING, leave it as is for next reconciliation\n          }\n        } catch (error) {\n          console.error(`Error reconciling payment ${payment.id}:`, error);\n        }\n      }\n\n      const duration = Date.now() - startTime;\n      console.log(`Reconciliation completed in ${duration}ms: ${processed} processed, ${updated} updated, ${timedOut} timed out`);\n      \n    } catch (error) {\n      console.error('Error during reconciliation:', error);\n    } finally {\n      this.isRunning = false;\n    }\n  }\n\n  async forceReconciliation(): Promise<{ success: boolean; message: string }> {\n    if (this.isRunning) {\n      return { success: false, message: 'Reconciliation is already running' };\n    }\n\n    try {\n      await this.runReconciliation();\n      return { success: true, message: 'Reconciliation completed successfully' };\n    } catch (error) {\n      console.error('Force reconciliation error:', error);\n      return { \n        success: false, \n        message: error instanceof Error ? error.message : 'Unknown error' \n      };\n    }\n  }\n\n  getStatus() {\n    return {\n      isRunning: this.isRunning,\n      schedule: this.cronExpression,\n      lastRun: new Date().toISOString(), // In a real app, store this in database\n      nextRun: this.getNextRunTime()\n    };\n  }\n\n  private getNextRunTime(): string {\n    // Calculate next run time based on cron expression\n    // This is a simplified calculation - in production, use a proper cron parser\n    const now = new Date();\n    const next = new Date(now.getTime() + 15 * 60 * 1000); // Assume 15 minute intervals\n    return next.toISOString();\n  }\n}\n\nexport const reconciliationService = new ReconciliationService();\n","size_bytes":5065},"server/services/telegram.ts":{"content":"import { Request, Response } from 'express';\nimport { storage } from '../storage';\n\ninterface TelegramUser {\n  id: number;\n  first_name: string;\n  last_name?: string;\n  username?: string;\n}\n\ninterface TelegramMessage {\n  message_id: number;\n  from: TelegramUser;\n  chat: {\n    id: number;\n    type: string;\n  };\n  text?: string;\n  date: number;\n}\n\ninterface TelegramUpdate {\n  update_id: number;\n  message?: TelegramMessage;\n  callback_query?: any;\n}\n\nclass TelegramService {\n  private botToken: string;\n  private webhookPath: string;\n\n  constructor() {\n    this.botToken = process.env.TELEGRAM_BOT_TOKEN || '';\n    this.webhookPath = process.env.TELEGRAM_WEBHOOK_SECRET_PATH || '/webhook/telegram/secret';\n    \n    if (!this.botToken) {\n      throw new Error('TELEGRAM_BOT_TOKEN is required');\n    }\n  }\n\n  async sendMessage(chatId: number, text: string, options: any = {}) {\n    const url = `https://api.telegram.org/bot${this.botToken}/sendMessage`;\n    \n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          chat_id: chatId,\n          text,\n          ...options,\n        }),\n      });\n\n      if (!response.ok) {\n        console.error('Failed to send Telegram message:', await response.text());\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error sending Telegram message:', error);\n      throw error;\n    }\n  }\n\n  async sendPhoto(chatId: number, photo: string, caption?: string, options: any = {}) {\n    const url = `https://api.telegram.org/bot${this.botToken}/sendPhoto`;\n    \n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          chat_id: chatId,\n          photo,\n          caption,\n          ...options,\n        }),\n      });\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error sending Telegram photo:', error);\n      throw error;\n    }\n  }\n\n  async handleWebhook(req: Request, res: Response) {\n    try {\n      const update: TelegramUpdate = req.body;\n      \n      if (update.message) {\n        await this.handleMessage(update.message);\n      } else if (update.callback_query) {\n        await this.handleCallbackQuery(update.callback_query);\n      }\n\n      res.sendStatus(200);\n    } catch (error) {\n      console.error('Error handling Telegram webhook:', error);\n      res.sendStatus(500);\n    }\n  }\n\n  private async handleMessage(message: TelegramMessage) {\n    const chatId = message.chat.id;\n    const text = message.text || '';\n    const user = message.from;\n\n    // Register or update user\n    let dbUser = await storage.getUserByTelegramId(user.id.toString());\n    if (!dbUser) {\n      dbUser = await storage.createUser({\n        telegramId: user.id.toString(),\n        username: user.username,\n        firstName: user.first_name,\n        lastName: user.last_name,\n      });\n    }\n\n    if (text.startsWith('/start')) {\n      await this.handleStartCommand(chatId, dbUser);\n    } else if (text.startsWith('/menu')) {\n      await this.showMainMenu(chatId);\n    } else if (text.startsWith('/browse')) {\n      await this.showCategories(chatId);\n    } else if (text.startsWith('/cart')) {\n      await this.showCart(chatId, dbUser.id);\n    } else if (text.startsWith('/orders')) {\n      await this.showOrders(chatId, dbUser.id);\n    } else if (text.startsWith('/support')) {\n      await this.showSupport(chatId);\n    } else {\n      await this.handleTextMessage(chatId, text, dbUser);\n    }\n  }\n\n  private async handleCallbackQuery(callbackQuery: any) {\n    const chatId = callbackQuery.message.chat.id;\n    const data = callbackQuery.data;\n    const messageId = callbackQuery.message.message_id;\n\n    // Answer callback query to remove loading state\n    await fetch(`https://api.telegram.org/bot${this.botToken}/answerCallbackQuery`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ callback_query_id: callbackQuery.id }),\n    });\n\n    if (data.startsWith('category_')) {\n      const categoryId = data.replace('category_', '');\n      await this.showProductsInCategory(chatId, categoryId);\n    } else if (data.startsWith('product_')) {\n      const productId = data.replace('product_', '');\n      await this.showProductDetails(chatId, productId);\n    } else if (data.startsWith('add_to_cart_')) {\n      const productId = data.replace('add_to_cart_', '');\n      await this.addToCart(chatId, productId);\n    } else if (data.startsWith('checkout')) {\n      await this.startCheckout(chatId);\n    }\n  }\n\n  private async handleStartCommand(chatId: number, user: any) {\n    const welcomeMessage = `\nüõçÔ∏è **Welcome to EcomBot!**\n\nHi ${user.firstName || 'there'}! I'm your personal shopping assistant. \n\nHere's what you can do:\n‚Ä¢ üì± Browse products by category\n‚Ä¢ üîç Search for specific items  \n‚Ä¢ üõí Add items to your cart\n‚Ä¢ üí≥ Pay securely with MTN Mobile Money\n‚Ä¢ üì¶ Track your orders\n\nLet's get started! Use the menu below or type /menu anytime.\n    `;\n\n    await this.sendMessage(chatId, welcomeMessage, {\n      parse_mode: 'Markdown',\n      reply_markup: {\n        keyboard: [\n          [{ text: 'üì± Browse Products' }, { text: 'üõí My Cart' }],\n          [{ text: 'üì¶ My Orders' }, { text: 'üîç Search' }],\n          [{ text: 'üí¨ Support' }, { text: 'üë§ Profile' }]\n        ],\n        resize_keyboard: true,\n        one_time_keyboard: false\n      }\n    });\n  }\n\n  private async showMainMenu(chatId: number) {\n    const menuMessage = `\nüè† **Main Menu**\n\nChoose an option below:\n    `;\n\n    await this.sendMessage(chatId, menuMessage, {\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [\n          [\n            { text: 'üì± Browse Categories', callback_data: 'browse_categories' },\n            { text: 'üîç Search Products', callback_data: 'search_products' }\n          ],\n          [\n            { text: 'üõí View Cart', callback_data: 'view_cart' },\n            { text: 'üì¶ My Orders', callback_data: 'my_orders' }\n          ],\n          [\n            { text: 'üí¨ Contact Support', callback_data: 'support' },\n            { text: 'üë§ My Profile', callback_data: 'profile' }\n          ]\n        ]\n      }\n    });\n  }\n\n  private async showCategories(chatId: number) {\n    const categories = await storage.getAllCategories();\n    \n    if (categories.length === 0) {\n      await this.sendMessage(chatId, 'üì± No categories available at the moment. Please check back later!');\n      return;\n    }\n\n    const inlineKeyboard = categories.map(category => ([\n      { text: category.name, callback_data: `category_${category.id}` }\n    ]));\n\n    await this.sendMessage(chatId, 'üì± **Product Categories**\\n\\nChoose a category to browse:', {\n      parse_mode: 'Markdown',\n      reply_markup: { inline_keyboard: inlineKeyboard }\n    });\n  }\n\n  private async showProductsInCategory(chatId: number, categoryId: string) {\n    const products = await storage.getProductsByCategoryId(categoryId);\n    \n    if (products.length === 0) {\n      await this.sendMessage(chatId, 'üì± No products available in this category.');\n      return;\n    }\n\n    for (const product of products.slice(0, 10)) { // Show first 10 products\n      const message = `\nüõçÔ∏è **${product.title}**\n\nüí∞ Price: ‚Çµ${product.priceGhs}\nüì¶ Stock: ${product.stock} available\nüìã SKU: ${product.sku}\n\n${product.description || 'No description available'}\n      `;\n\n      const keyboard = [\n        [{ text: 'üõí Add to Cart', callback_data: `add_to_cart_${product.id}` }],\n        [{ text: 'üì± View Details', callback_data: `product_${product.id}` }]\n      ];\n\n      if (product.images && product.images.length > 0) {\n        await this.sendPhoto(chatId, product.images[0], message, {\n          parse_mode: 'Markdown',\n          reply_markup: { inline_keyboard: keyboard }\n        });\n      } else {\n        await this.sendMessage(chatId, message, {\n          parse_mode: 'Markdown',\n          reply_markup: { inline_keyboard: keyboard }\n        });\n      }\n    }\n  }\n\n  private async showProductDetails(chatId: number, productId: string) {\n    const product = await storage.getProduct(productId);\n    \n    if (!product) {\n      await this.sendMessage(chatId, '‚ùå Product not found.');\n      return;\n    }\n\n    const message = `\nüõçÔ∏è **${product.title}**\n\nüí∞ **Price:** ‚Çµ${product.priceGhs}\nüì¶ **Stock:** ${product.stock} available\nüìã **SKU:** ${product.sku}\n\nüìù **Description:**\n${product.description || 'No description available'}\n\n${product.tags && product.tags.length > 0 ? `üè∑Ô∏è **Tags:** ${product.tags.join(', ')}` : ''}\n    `;\n\n    const keyboard = [\n      [{ text: 'üõí Add to Cart', callback_data: `add_to_cart_${product.id}` }],\n      [{ text: 'üîô Back to Categories', callback_data: 'browse_categories' }]\n    ];\n\n    if (product.images && product.images.length > 0) {\n      await this.sendPhoto(chatId, product.images[0], message, {\n        parse_mode: 'Markdown',\n        reply_markup: { inline_keyboard: keyboard }\n      });\n    } else {\n      await this.sendMessage(chatId, message, {\n        parse_mode: 'Markdown',\n        reply_markup: { inline_keyboard: keyboard }\n      });\n    }\n  }\n\n  private async addToCart(chatId: number, productId: string) {\n    // In a real implementation, you'd store cart items in a session or database\n    // For now, we'll just show a success message\n    const product = await storage.getProduct(productId);\n    \n    if (!product || product.stock <= 0) {\n      await this.sendMessage(chatId, '‚ùå Sorry, this product is not available.');\n      return;\n    }\n\n    await this.sendMessage(chatId, `‚úÖ **${product.title}** added to your cart!\\n\\nüí∞ Price: ‚Çµ${product.priceGhs}`, {\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [\n          [\n            { text: 'üõí View Cart', callback_data: 'view_cart' },\n            { text: 'üí≥ Checkout', callback_data: 'checkout' }\n          ],\n          [{ text: 'üîô Continue Shopping', callback_data: 'browse_categories' }]\n        ]\n      }\n    });\n  }\n\n  private async showCart(chatId: number, userId: string) {\n    // Placeholder for cart functionality\n    await this.sendMessage(chatId, 'üõí **Your Cart**\\n\\nYour cart is currently empty.\\nUse /browse to start shopping!', {\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [\n          [{ text: 'üì± Browse Products', callback_data: 'browse_categories' }]\n        ]\n      }\n    });\n  }\n\n  private async showOrders(chatId: number, userId: string) {\n    const orders = await storage.getOrdersByUserId(userId);\n    \n    if (orders.length === 0) {\n      await this.sendMessage(chatId, 'üì¶ **Your Orders**\\n\\nYou haven\\'t placed any orders yet.\\nStart shopping to see your orders here!', {\n        parse_mode: 'Markdown'\n      });\n      return;\n    }\n\n    let ordersText = 'üì¶ **Your Recent Orders**\\n\\n';\n    \n    for (const order of orders.slice(0, 5)) {\n      ordersText += `üÜî Order: ${order.orderNumber}\\n`;\n      ordersText += `üí∞ Total: ‚Çµ${order.totalGhs}\\n`;\n      ordersText += `üìä Status: ${order.status}\\n`;\n      ordersText += `üìÖ Date: ${order.createdAt.toLocaleDateString()}\\n\\n`;\n    }\n\n    await this.sendMessage(chatId, ordersText, { parse_mode: 'Markdown' });\n  }\n\n  private async showSupport(chatId: number) {\n    const supportMessage = `\nüí¨ **Customer Support**\n\nNeed help? Our support team is here for you!\n\nüìß **Email:** support@ecombot.gh\nüì± **Phone:** +233 XXX XXX XXX\n‚è∞ **Hours:** Mon-Fri, 9AM-6PM GMT\n\n**Common Questions:**\n‚Ä¢ How to pay with MTN MoMo?\n‚Ä¢ Order status and tracking\n‚Ä¢ Product returns and refunds\n‚Ä¢ Account management\n\nType your question below or contact us directly!\n    `;\n\n    await this.sendMessage(chatId, supportMessage, { parse_mode: 'Markdown' });\n  }\n\n  private async startCheckout(chatId: number) {\n    await this.sendMessage(chatId, 'üí≥ **Checkout Process**\\n\\nCheckout functionality is under development.\\nYou will be able to pay securely with MTN Mobile Money soon!', {\n      parse_mode: 'Markdown'\n    });\n  }\n\n  private async handleTextMessage(chatId: number, text: string, user: any) {\n    if (text.includes('browse') || text.includes('üì±')) {\n      await this.showCategories(chatId);\n    } else if (text.includes('cart') || text.includes('üõí')) {\n      await this.showCart(chatId, user.id);\n    } else if (text.includes('orders') || text.includes('üì¶')) {\n      await this.showOrders(chatId, user.id);\n    } else if (text.includes('support') || text.includes('üí¨')) {\n      await this.showSupport(chatId);\n    } else if (text.includes('search') || text.includes('üîç')) {\n      await this.sendMessage(chatId, 'üîç **Search Products**\\n\\nSearch functionality coming soon!\\nFor now, use /browse to explore our categories.', {\n        parse_mode: 'Markdown'\n      });\n    } else {\n      // Try to search for products\n      const searchResults = await storage.searchProducts(text);\n      \n      if (searchResults.length > 0) {\n        await this.sendMessage(chatId, `üîç Found ${searchResults.length} product(s) for \"${text}\":`);\n        await this.showSearchResults(chatId, searchResults);\n      } else {\n        await this.sendMessage(chatId, `‚ùå No products found for \"${text}\".\\n\\nTry browsing our categories instead!`, {\n          reply_markup: {\n            inline_keyboard: [\n              [{ text: 'üì± Browse Categories', callback_data: 'browse_categories' }]\n            ]\n          }\n        });\n      }\n    }\n  }\n\n  private async showSearchResults(chatId: number, products: any[]) {\n    for (const product of products.slice(0, 5)) {\n      const message = `\nüõçÔ∏è **${product.title}**\nüí∞ ‚Çµ${product.priceGhs} | üì¶ ${product.stock} in stock\n      `;\n\n      await this.sendMessage(chatId, message, {\n        parse_mode: 'Markdown',\n        reply_markup: {\n          inline_keyboard: [\n            [{ text: 'üì± View Details', callback_data: `product_${product.id}` }]\n          ]\n        }\n      });\n    }\n  }\n\n  getWebhookPath() {\n    return this.webhookPath;\n  }\n}\n\nexport const telegramService = new TelegramService();\n","size_bytes":14308},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthUser = {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n  mustChangePassword: boolean;\n};\n\ntype AuthContextType = {\n  user: AuthUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<AuthUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<AuthUser, Error, RegisterData>;\n  changePasswordMutation: UseMutationResult<void, Error, ChangePasswordData>;\n};\n\ntype LoginData = {\n  email: string;\n  password: string;\n};\n\ntype RegisterData = {\n  email: string;\n  password: string;\n  name: string;\n};\n\ntype ChangePasswordData = {\n  currentPassword: string;\n  newPassword: string;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<AuthUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: AuthUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${user.name}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: RegisterData) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: AuthUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Registration successful\",\n        description: `Welcome to EcomBot Admin, ${user.name}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: ChangePasswordData) => {\n      const res = await apiRequest(\"POST\", \"/api/change-password\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Password changed\",\n        description: \"Your password has been updated successfully.\",\n      });\n      // Update user to clear mustChangePassword flag\n      if (user) {\n        queryClient.setQueryData([\"/api/user\"], { ...user, mustChangePassword: false });\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Password change failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n        changePasswordMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":4205},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-blue-600\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}\n","size_bytes":719},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analytics.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Topbar } from \"@/components/layout/topbar\";\nimport { MetricsCards } from \"@/components/charts/metrics-cards\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { TrendingUp, TrendingDown, BarChart3 } from \"lucide-react\";\n\nexport default function Analytics() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [timeRange, setTimeRange] = useState(\"7d\");\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/metrics\"],\n  });\n\n  const { data: orders = [] } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const { data: payments = [] } = useQuery({\n    queryKey: [\"/api/payments\"],\n  });\n\n  // Calculate analytics data\n  const getAnalyticsData = () => {\n    const now = new Date();\n    const timeRanges = {\n      \"7d\": 7,\n      \"30d\": 30,\n      \"90d\": 90,\n      \"1y\": 365\n    };\n    \n    const days = timeRanges[timeRange as keyof typeof timeRanges] || 7;\n    const cutoffDate = new Date(now.getTime() - days * 24 * 60 * 60 * 1000);\n    \n    const recentOrders = orders.filter((order: any) => \n      new Date(order.createdAt) >= cutoffDate\n    );\n    \n    const recentPayments = payments.filter((payment: any) => \n      new Date(payment.createdAt) >= cutoffDate\n    );\n\n    return {\n      totalRevenue: recentOrders\n        .filter((order: any) => order.status === 'PAID')\n        .reduce((sum: number, order: any) => sum + parseFloat(order.totalGhs || \"0\"), 0),\n      totalOrders: recentOrders.length,\n      paidOrders: recentOrders.filter((order: any) => order.status === 'PAID').length,\n      conversionRate: recentOrders.length > 0 \n        ? (recentOrders.filter((order: any) => order.status === 'PAID').length / recentOrders.length * 100)\n        : 0,\n      avgOrderValue: recentOrders.length > 0\n        ? recentOrders\n            .filter((order: any) => order.status === 'PAID')\n            .reduce((sum: number, order: any) => sum + parseFloat(order.totalGhs || \"0\"), 0) / \n          recentOrders.filter((order: any) => order.status === 'PAID').length\n        : 0,\n      paymentSuccessRate: recentPayments.length > 0\n        ? (recentPayments.filter((payment: any) => payment.status === 'SUCCESS').length / recentPayments.length * 100)\n        : 0\n    };\n  };\n\n  const analyticsData = getAnalyticsData();\n\n  const orderStatusBreakdown = [\n    { status: 'PAID', count: orders.filter((o: any) => o.status === 'PAID').length, color: 'bg-green-100 text-green-800' },\n    { status: 'PENDING', count: orders.filter((o: any) => o.status === 'PENDING').length, color: 'bg-yellow-100 text-yellow-800' },\n    { status: 'SHIPPED', count: orders.filter((o: any) => o.status === 'SHIPPED').length, color: 'bg-blue-100 text-blue-800' },\n    { status: 'DELIVERED', count: orders.filter((o: any) => o.status === 'DELIVERED').length, color: 'bg-purple-100 text-purple-800' },\n    { status: 'CANCELLED', count: orders.filter((o: any) => o.status === 'CANCELLED').length, color: 'bg-red-100 text-red-800' },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile sidebar */}\n      <div \n        className={`fixed inset-0 z-50 lg:hidden ${sidebarOpen ? 'block' : 'hidden'}`}\n        onClick={() => setSidebarOpen(false)}\n      >\n        <div className=\"fixed inset-y-0 left-0 z-50 w-64\">\n          <Sidebar />\n        </div>\n      </div>\n\n      {/* Desktop sidebar */}\n      <div className=\"hidden lg:fixed lg:inset-y-0 lg:left-0 lg:z-50 lg:block lg:w-64\">\n        <Sidebar />\n      </div>\n\n      {/* Main content */}\n      <div className=\"lg:pl-64\">\n        <Topbar onToggleSidebar={() => setSidebarOpen(!sidebarOpen)} />\n\n        <main className=\"py-8 px-4 sm:px-6 lg:px-8\" data-testid=\"analytics-content\">\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Analytics</h1>\n                <p className=\"mt-2 text-gray-600\">Analyze your e-commerce performance and trends</p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Select value={timeRange} onValueChange={setTimeRange}>\n                  <SelectTrigger className=\"w-32\" data-testid=\"select-time-range\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"7d\">Last 7 days</SelectItem>\n                    <SelectItem value=\"30d\">Last 30 days</SelectItem>\n                    <SelectItem value=\"90d\">Last 90 days</SelectItem>\n                    <SelectItem value=\"1y\">Last year</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          {/* Overall Metrics */}\n          <MetricsCards \n            data={metrics || { totalOrders: 0, revenue: \"0\", customers: 0, mtnPayments: 0 }} \n            isLoading={metricsLoading}\n          />\n\n          {/* Detailed Analytics */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8\">\n            {/* Revenue Analytics */}\n            <Card className=\"bg-white shadow-sm border border-gray-200\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-medium text-gray-900\">Revenue Analytics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Total Revenue</span>\n                    <span className=\"text-lg font-semibold text-gray-900\" data-testid=\"analytics-total-revenue\">\n                      ‚Çµ{analyticsData.totalRevenue.toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Average Order Value</span>\n                    <span className=\"text-lg font-semibold text-gray-900\" data-testid=\"analytics-avg-order-value\">\n                      ‚Çµ{analyticsData.avgOrderValue.toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Paid Orders</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-lg font-semibold text-gray-900\">\n                        {analyticsData.paidOrders}\n                      </span>\n                      <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Conversion Analytics */}\n            <Card className=\"bg-white shadow-sm border border-gray-200\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-medium text-gray-900\">Conversion Metrics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Conversion Rate</span>\n                    <span className=\"text-lg font-semibold text-gray-900\" data-testid=\"analytics-conversion-rate\">\n                      {analyticsData.conversionRate.toFixed(1)}%\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Payment Success Rate</span>\n                    <span className=\"text-lg font-semibold text-gray-900\" data-testid=\"analytics-payment-success-rate\">\n                      {analyticsData.paymentSuccessRate.toFixed(1)}%\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Total Orders</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-lg font-semibold text-gray-900\">\n                        {analyticsData.totalOrders}\n                      </span>\n                      {analyticsData.totalOrders > 0 ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500\" />\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Order Status Breakdown */}\n            <Card className=\"bg-white shadow-sm border border-gray-200\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-medium text-gray-900\">Order Status</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {orderStatusBreakdown.map((item) => (\n                    <div key={item.status} className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-600\">{item.status}</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm font-medium text-gray-900\">{item.count}</span>\n                        <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${item.color}`}>\n                          {item.count}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Chart Placeholder */}\n          <Card className=\"bg-white shadow-sm border border-gray-200\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-medium text-gray-900\">Revenue Trend</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 flex items-center justify-center bg-gray-50 rounded-lg\">\n                <div className=\"text-center\">\n                  <BarChart3 className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <p className=\"text-gray-500\">Chart visualization coming soon</p>\n                  <p className=\"text-sm text-gray-400\">Revenue and order trends will be displayed here</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10818},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Redirect } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { ShoppingCart, TriangleAlert } from \"lucide-react\";\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [loginForm, setLoginForm] = useState({ email: \"\", password: \"\" });\n  const [registerForm, setRegisterForm] = useState({ email: \"\", password: \"\", name: \"\" });\n\n  // Redirect if already logged in\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginForm);\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    registerMutation.mutate(registerForm);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 p-4\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto h-16 w-16 bg-blue-600 rounded-full flex items-center justify-center mb-4\">\n            <ShoppingCart className=\"text-white text-2xl h-8 w-8\" />\n          </div>\n          <h2 className=\"text-3xl font-bold text-gray-900\">EcomBot Admin</h2>\n          <p className=\"mt-2 text-gray-600\">Telegram E-commerce Management System</p>\n        </div>\n        \n        <Card className=\"bg-white shadow-lg border border-gray-200\">\n          <CardHeader>\n            <CardTitle>Access Admin Dashboard</CardTitle>\n            <CardDescription>\n              Sign in to manage your Telegram e-commerce bot\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"login\" className=\"space-y-4\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n                <TabsTrigger value=\"register\" data-testid=\"tab-register\">Register</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"login\">\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-email\">Email Address</Label>\n                    <Input\n                      id=\"login-email\"\n                      type=\"email\"\n                      value={loginForm.email}\n                      onChange={(e) => setLoginForm({ ...loginForm, email: e.target.value })}\n                      placeholder=\"admin@example.com\"\n                      required\n                      data-testid=\"input-login-email\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-password\">Password</Label>\n                    <Input\n                      id=\"login-password\"\n                      type=\"password\"\n                      value={loginForm.password}\n                      onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}\n                      placeholder=\"Enter your password\"\n                      required\n                      data-testid=\"input-login-password\"\n                    />\n                  </div>\n                  \n                  <Alert className=\"bg-amber-50 border-amber-200\">\n                    <TriangleAlert className=\"h-4 w-4 text-amber-600\" />\n                    <AlertDescription className=\"text-amber-800\">\n                      <strong>Default Credentials:</strong><br />\n                      Email: admin@example.com<br />\n                      Password: ChangeMe!2025<br />\n                      <em>Please change on first login</em>\n                    </AlertDescription>\n                  </Alert>\n                  \n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-blue-600 hover:bg-blue-700\" \n                    disabled={loginMutation.isPending}\n                    data-testid=\"button-login\"\n                  >\n                    {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n                  </Button>\n                </form>\n              </TabsContent>\n              \n              <TabsContent value=\"register\">\n                <form onSubmit={handleRegister} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-name\">Full Name</Label>\n                    <Input\n                      id=\"register-name\"\n                      type=\"text\"\n                      value={registerForm.name}\n                      onChange={(e) => setRegisterForm({ ...registerForm, name: e.target.value })}\n                      placeholder=\"Your full name\"\n                      required\n                      data-testid=\"input-register-name\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-email\">Email Address</Label>\n                    <Input\n                      id=\"register-email\"\n                      type=\"email\"\n                      value={registerForm.email}\n                      onChange={(e) => setRegisterForm({ ...registerForm, email: e.target.value })}\n                      placeholder=\"your@email.com\"\n                      required\n                      data-testid=\"input-register-email\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-password\">Password</Label>\n                    <Input\n                      id=\"register-password\"\n                      type=\"password\"\n                      value={registerForm.password}\n                      onChange={(e) => setRegisterForm({ ...registerForm, password: e.target.value })}\n                      placeholder=\"Create a strong password\"\n                      required\n                      data-testid=\"input-register-password\"\n                    />\n                  </div>\n                  \n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-blue-600 hover:bg-blue-700\" \n                    disabled={registerMutation.isPending}\n                    data-testid=\"button-register\"\n                  >\n                    {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n        \n        <div className=\"text-center text-sm text-gray-500\">\n          <p>MTN MoMo Integration ‚Ä¢ Ghana Market ‚Ä¢ Production Ready</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7184},"client/src/pages/coupons.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Topbar } from \"@/components/layout/topbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Plus, Search, Tags, Edit, Trash2, Calendar } from \"lucide-react\";\n\nexport default function Coupons() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingCoupon, setEditingCoupon] = useState<any>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [couponForm, setCouponForm] = useState({\n    code: \"\",\n    name: \"\",\n    description: \"\",\n    type: \"percent\",\n    value: \"\",\n    minOrderAmount: \"\",\n    maxUses: \"\",\n    startsAt: \"\",\n    expiresAt: \"\"\n  });\n  const { toast } = useToast();\n\n  const { data: coupons = [], isLoading } = useQuery({\n    queryKey: [\"/api/coupons\"],\n  });\n\n  const createCouponMutation = useMutation({\n    mutationFn: async (couponData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/coupons\", couponData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/coupons\"] });\n      setIsModalOpen(false);\n      resetForm();\n      toast({\n        title: \"Coupon created\",\n        description: \"Coupon has been successfully created.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Creation failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCouponMutation = useMutation({\n    mutationFn: async (couponId: string) => {\n      await apiRequest(\"DELETE\", `/api/coupons/${couponId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/coupons\"] });\n      toast({\n        title: \"Coupon deleted\",\n        description: \"Coupon has been successfully deleted.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Delete failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredCoupons = coupons.filter((coupon: any) => {\n    const searchTerm = searchQuery.toLowerCase();\n    return (\n      coupon.code.toLowerCase().includes(searchTerm) ||\n      coupon.name.toLowerCase().includes(searchTerm)\n    );\n  });\n\n  const resetForm = () => {\n    setCouponForm({\n      code: \"\",\n      name: \"\",\n      description: \"\",\n      type: \"percent\",\n      value: \"\",\n      minOrderAmount: \"\",\n      maxUses: \"\",\n      startsAt: \"\",\n      expiresAt: \"\"\n    });\n    setEditingCoupon(null);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = {\n      ...couponForm,\n      value: parseFloat(couponForm.value),\n      minOrderAmount: couponForm.minOrderAmount ? parseFloat(couponForm.minOrderAmount) : null,\n      maxUses: couponForm.maxUses ? parseInt(couponForm.maxUses) : null,\n      startsAt: couponForm.startsAt ? new Date(couponForm.startsAt).toISOString() : null,\n      expiresAt: couponForm.expiresAt ? new Date(couponForm.expiresAt).toISOString() : null,\n    };\n    \n    createCouponMutation.mutate(formData);\n  };\n\n  const handleDeleteCoupon = (couponId: string) => {\n    if (confirm(\"Are you sure you want to delete this coupon?\")) {\n      deleteCouponMutation.mutate(couponId);\n    }\n  };\n\n  const getCouponStatus = (coupon: any) => {\n    const now = new Date();\n    const expiresAt = coupon.expiresAt ? new Date(coupon.expiresAt) : null;\n    const startsAt = coupon.startsAt ? new Date(coupon.startsAt) : null;\n\n    if (!coupon.isActive) return { text: \"Inactive\", color: \"bg-gray-100 text-gray-800\" };\n    if (expiresAt && now > expiresAt) return { text: \"Expired\", color: \"bg-red-100 text-red-800\" };\n    if (startsAt && now < startsAt) return { text: \"Scheduled\", color: \"bg-blue-100 text-blue-800\" };\n    if (coupon.maxUses && coupon.usedCount >= coupon.maxUses) return { text: \"Used Up\", color: \"bg-yellow-100 text-yellow-800\" };\n    return { text: \"Active\", color: \"bg-green-100 text-green-800\" };\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile sidebar */}\n      <div \n        className={`fixed inset-0 z-50 lg:hidden ${sidebarOpen ? 'block' : 'hidden'}`}\n        onClick={() => setSidebarOpen(false)}\n      >\n        <div className=\"fixed inset-y-0 left-0 z-50 w-64\">\n          <Sidebar />\n        </div>\n      </div>\n\n      {/* Desktop sidebar */}\n      <div className=\"hidden lg:fixed lg:inset-y-0 lg:left-0 lg:z-50 lg:block lg:w-64\">\n        <Sidebar />\n      </div>\n\n      {/* Main content */}\n      <div className=\"lg:pl-64\">\n        <Topbar onToggleSidebar={() => setSidebarOpen(!sidebarOpen)} />\n\n        <main className=\"py-8 px-4 sm:px-6 lg:px-8\" data-testid=\"coupons-content\">\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Coupons</h1>\n                <p className=\"mt-2 text-gray-600\">Manage discount codes and promotional offers</p>\n              </div>\n              <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n                <DialogTrigger asChild>\n                  <Button \n                    className=\"bg-green-600 text-white hover:bg-green-700\"\n                    onClick={() => resetForm()}\n                    data-testid=\"button-add-coupon\"\n                  >\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Create Coupon\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>\n                      {editingCoupon ? \"Edit Coupon\" : \"Create New Coupon\"}\n                    </DialogTitle>\n                  </DialogHeader>\n                  <form onSubmit={handleSubmit} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"code\">Coupon Code</Label>\n                        <Input\n                          id=\"code\"\n                          value={couponForm.code}\n                          onChange={(e) => setCouponForm({ ...couponForm, code: e.target.value.toUpperCase() })}\n                          placeholder=\"SAVE20\"\n                          required\n                          data-testid=\"input-coupon-code\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"type\">Type</Label>\n                        <Select value={couponForm.type} onValueChange={(value) => setCouponForm({ ...couponForm, type: value })}>\n                          <SelectTrigger data-testid=\"select-coupon-type\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"percent\">Percentage</SelectItem>\n                            <SelectItem value=\"fixed\">Fixed Amount</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"name\">Name</Label>\n                      <Input\n                        id=\"name\"\n                        value={couponForm.name}\n                        onChange={(e) => setCouponForm({ ...couponForm, name: e.target.value })}\n                        placeholder=\"20% Off Sale\"\n                        required\n                        data-testid=\"input-coupon-name\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"description\">Description</Label>\n                      <Input\n                        id=\"description\"\n                        value={couponForm.description}\n                        onChange={(e) => setCouponForm({ ...couponForm, description: e.target.value })}\n                        placeholder=\"Get 20% off your order\"\n                        data-testid=\"input-coupon-description\"\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"value\">\n                          Value {couponForm.type === \"percent\" ? \"(%)\" : \"(GHS)\"}\n                        </Label>\n                        <Input\n                          id=\"value\"\n                          type=\"number\"\n                          step={couponForm.type === \"percent\" ? \"1\" : \"0.01\"}\n                          max={couponForm.type === \"percent\" ? \"100\" : undefined}\n                          value={couponForm.value}\n                          onChange={(e) => setCouponForm({ ...couponForm, value: e.target.value })}\n                          placeholder={couponForm.type === \"percent\" ? \"20\" : \"50.00\"}\n                          required\n                          data-testid=\"input-coupon-value\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"minOrderAmount\">Min Order (GHS)</Label>\n                        <Input\n                          id=\"minOrderAmount\"\n                          type=\"number\"\n                          step=\"0.01\"\n                          value={couponForm.minOrderAmount}\n                          onChange={(e) => setCouponForm({ ...couponForm, minOrderAmount: e.target.value })}\n                          placeholder=\"100.00\"\n                          data-testid=\"input-min-order\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"maxUses\">Max Uses</Label>\n                        <Input\n                          id=\"maxUses\"\n                          type=\"number\"\n                          value={couponForm.maxUses}\n                          onChange={(e) => setCouponForm({ ...couponForm, maxUses: e.target.value })}\n                          placeholder=\"100\"\n                          data-testid=\"input-max-uses\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"expiresAt\">Expires At</Label>\n                        <Input\n                          id=\"expiresAt\"\n                          type=\"date\"\n                          value={couponForm.expiresAt}\n                          onChange={(e) => setCouponForm({ ...couponForm, expiresAt: e.target.value })}\n                          data-testid=\"input-expires-at\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex justify-end space-x-2\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setIsModalOpen(false)}\n                        data-testid=\"button-cancel-coupon\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={createCouponMutation.isPending}\n                        className=\"bg-green-600 hover:bg-green-700\"\n                        data-testid=\"button-save-coupon\"\n                      >\n                        {createCouponMutation.isPending ? \"Creating...\" : \"Create Coupon\"}\n                      </Button>\n                    </div>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n\n          {/* Search */}\n          <Card className=\"bg-white border border-gray-200 mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"max-w-md\">\n                <Label className=\"block text-sm font-medium text-gray-700 mb-1\">Search Coupons</Label>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search by code or name...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-coupons\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Coupons Table */}\n          <Card className=\"bg-white shadow-sm border border-gray-200\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Coupon\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Type & Value\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Usage\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Status\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Expires\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {isLoading ? (\n                    <tr>\n                      <td colSpan={6} className=\"px-6 py-12 text-center\">\n                        <div className=\"flex items-center justify-center\">\n                          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n                          <span className=\"ml-2 text-gray-500\">Loading coupons...</span>\n                        </div>\n                      </td>\n                    </tr>\n                  ) : filteredCoupons.length === 0 ? (\n                    <tr>\n                      <td colSpan={6} className=\"px-6 py-12 text-center\">\n                        <Tags className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                        <p className=\"text-gray-500 text-lg\">No coupons found</p>\n                        <p className=\"text-gray-400 text-sm\">\n                          {searchQuery\n                            ? \"Try adjusting your search terms\"\n                            : \"Create your first coupon to start offering discounts\"\n                          }\n                        </p>\n                      </td>\n                    </tr>\n                  ) : (\n                    filteredCoupons.map((coupon: any) => {\n                      const status = getCouponStatus(coupon);\n                      \n                      return (\n                        <tr key={coupon.id} className=\"hover:bg-gray-50\" data-testid={`coupon-row-${coupon.id}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-900\" data-testid={`coupon-code-${coupon.id}`}>\n                                {coupon.code}\n                              </div>\n                              <div className=\"text-sm text-gray-500\">{coupon.name}</div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"text-sm text-gray-900\">\n                              {coupon.type === \"percent\" \n                                ? `${coupon.value}% off`\n                                : `‚Çµ${parseFloat(coupon.value || \"0\").toFixed(2)} off`\n                              }\n                            </div>\n                            {coupon.minOrderAmount && (\n                              <div className=\"text-sm text-gray-500\">\n                                Min order: ‚Çµ{parseFloat(coupon.minOrderAmount).toFixed(2)}\n                              </div>\n                            )}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {coupon.usedCount || 0}\n                            {coupon.maxUses && ` / ${coupon.maxUses}`}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge className={status.color} data-testid={`coupon-status-${coupon.id}`}>\n                              {status.text}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {coupon.expiresAt ? formatDate(coupon.expiresAt) : \"No expiry\"}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-blue-600 hover:text-blue-900 mr-2\"\n                              data-testid={`button-edit-coupon-${coupon.id}`}\n                            >\n                              <Edit className=\"h-4 w-4 mr-1\" />\n                              Edit\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteCoupon(coupon.id)}\n                              className=\"text-red-600 hover:text-red-900\"\n                              disabled={deleteCouponMutation.isPending}\n                              data-testid={`button-delete-coupon-${coupon.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-1\" />\n                              Delete\n                            </Button>\n                          </td>\n                        </tr>\n                      );\n                    })\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19683},"client/src/pages/customers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Topbar } from \"@/components/layout/topbar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Users, User, Eye } from \"lucide-react\";\n\nexport default function Customers() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: customers = [], isLoading } = useQuery({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const { data: orders = [] } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const filteredCustomers = customers.filter((customer: any) => {\n    const searchTerm = searchQuery.toLowerCase();\n    return (\n      customer.firstName?.toLowerCase().includes(searchTerm) ||\n      customer.lastName?.toLowerCase().includes(searchTerm) ||\n      customer.username?.toLowerCase().includes(searchTerm) ||\n      customer.phone?.toLowerCase().includes(searchTerm) ||\n      customer.telegramId?.toLowerCase().includes(searchTerm)\n    );\n  });\n\n  const getCustomerOrderCount = (customerId: string) => {\n    return orders.filter((order: any) => order.userId === customerId).length;\n  };\n\n  const getCustomerTotalSpent = (customerId: string) => {\n    const customerOrders = orders.filter((order: any) => order.userId === customerId && order.status === 'PAID');\n    return customerOrders.reduce((total: number, order: any) => total + parseFloat(order.totalGhs || \"0\"), 0);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const getCustomerInitials = (customer: any) => {\n    const firstName = customer.firstName || \"\";\n    const lastName = customer.lastName || \"\";\n    return (firstName.charAt(0) + lastName.charAt(0)).toUpperCase() || customer.username?.charAt(0).toUpperCase() || \"U\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile sidebar */}\n      <div \n        className={`fixed inset-0 z-50 lg:hidden ${sidebarOpen ? 'block' : 'hidden'}`}\n        onClick={() => setSidebarOpen(false)}\n      >\n        <div className=\"fixed inset-y-0 left-0 z-50 w-64\">\n          <Sidebar />\n        </div>\n      </div>\n\n      {/* Desktop sidebar */}\n      <div className=\"hidden lg:fixed lg:inset-y-0 lg:left-0 lg:z-50 lg:block lg:w-64\">\n        <Sidebar />\n      </div>\n\n      {/* Main content */}\n      <div className=\"lg:pl-64\">\n        <Topbar onToggleSidebar={() => setSidebarOpen(!sidebarOpen)} />\n\n        <main className=\"py-8 px-4 sm:px-6 lg:px-8\" data-testid=\"customers-content\">\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Customers</h1>\n                <p className=\"mt-2 text-gray-600\">Manage your Telegram bot users and their order history</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Search */}\n          <Card className=\"bg-white border border-gray-200 mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"max-w-md\">\n                <Label className=\"block text-sm font-medium text-gray-700 mb-1\">Search Customers</Label>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search by name, username, phone, or Telegram ID...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-customers\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Customers Table */}\n          <Card className=\"bg-white shadow-sm border border-gray-200\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Customer\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Telegram Info\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Phone\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Orders\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Total Spent\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Joined\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {isLoading ? (\n                    <tr>\n                      <td colSpan={7} className=\"px-6 py-12 text-center\">\n                        <div className=\"flex items-center justify-center\">\n                          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n                          <span className=\"ml-2 text-gray-500\">Loading customers...</span>\n                        </div>\n                      </td>\n                    </tr>\n                  ) : filteredCustomers.length === 0 ? (\n                    <tr>\n                      <td colSpan={7} className=\"px-6 py-12 text-center\">\n                        <Users className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                        <p className=\"text-gray-500 text-lg\">No customers found</p>\n                        <p className=\"text-gray-400 text-sm\">\n                          {searchQuery\n                            ? \"Try adjusting your search terms\"\n                            : \"Customers will appear here once they start the Telegram bot\"\n                          }\n                        </p>\n                      </td>\n                    </tr>\n                  ) : (\n                    filteredCustomers.map((customer: any) => {\n                      const orderCount = getCustomerOrderCount(customer.id);\n                      const totalSpent = getCustomerTotalSpent(customer.id);\n                      \n                      return (\n                        <tr key={customer.id} className=\"hover:bg-gray-50\" data-testid={`customer-row-${customer.id}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <div className=\"flex-shrink-0\">\n                                <div className=\"h-10 w-10 bg-gray-200 rounded-full flex items-center justify-center\">\n                                  <span className=\"text-sm font-medium text-gray-600\">\n                                    {getCustomerInitials(customer)}\n                                  </span>\n                                </div>\n                              </div>\n                              <div className=\"ml-4\">\n                                <div className=\"text-sm font-medium text-gray-900\" data-testid={`customer-name-${customer.id}`}>\n                                  {customer.firstName || customer.lastName \n                                    ? `${customer.firstName || ''} ${customer.lastName || ''}`.trim()\n                                    : customer.username || 'Unknown User'\n                                  }\n                                </div>\n                                <div className=\"text-sm text-gray-500\">\n                                  ID: {customer.id.substring(0, 8)}...\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"text-sm text-gray-900\">\n                              <div>@{customer.username || 'N/A'}</div>\n                              <div className=\"text-gray-500 font-mono text-xs\">\n                                TG: {customer.telegramId}\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {customer.phone || 'N/A'}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\" data-testid={`customer-orders-${customer.id}`}>\n                            {orderCount}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\" data-testid={`customer-spent-${customer.id}`}>\n                            ‚Çµ{totalSpent.toFixed(2)}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {formatDate(customer.createdAt)}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-blue-600 hover:text-blue-900\"\n                              data-testid={`button-view-customer-${customer.id}`}\n                            >\n                              <Eye className=\"h-4 w-4 mr-1\" />\n                              View Orders\n                            </Button>\n                          </td>\n                        </tr>\n                      );\n                    })\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10701},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Topbar } from \"@/components/layout/topbar\";\nimport { MetricsCards } from \"@/components/charts/metrics-cards\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Download, Tags, FileText } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Dashboard() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/metrics\"],\n  });\n\n  const { data: recentOrders } = useQuery({\n    queryKey: [\"/api/orders\"],\n    select: (data) => data?.slice(0, 5) || []\n  });\n\n  const recentOrdersData = recentOrders || [];\n\n  const getStatusColor = (status: string) => {\n    switch (status.toUpperCase()) {\n      case 'PAID':\n        return 'bg-green-100 text-green-800';\n      case 'PENDING':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'SHIPPED':\n        return 'bg-blue-100 text-blue-800';\n      case 'DELIVERED':\n        return 'bg-purple-100 text-purple-800';\n      case 'CANCELLED':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile sidebar */}\n      <div \n        className={`fixed inset-0 z-50 lg:hidden ${sidebarOpen ? 'block' : 'hidden'}`}\n        onClick={() => setSidebarOpen(false)}\n      >\n        <div className=\"fixed inset-y-0 left-0 z-50 w-64\">\n          <Sidebar />\n        </div>\n      </div>\n\n      {/* Desktop sidebar */}\n      <div className=\"hidden lg:fixed lg:inset-y-0 lg:left-0 lg:z-50 lg:block lg:w-64\">\n        <Sidebar />\n      </div>\n\n      {/* Main content */}\n      <div className=\"lg:pl-64\">\n        <Topbar onToggleSidebar={() => setSidebarOpen(!sidebarOpen)} />\n\n        <main className=\"py-8 px-4 sm:px-6 lg:px-8\" data-testid=\"dashboard-content\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">Dashboard Overview</h1>\n            <p className=\"mt-2 text-gray-600\">Monitor your Telegram e-commerce performance</p>\n          </div>\n\n          {/* Key Metrics Cards */}\n          <MetricsCards \n            data={metrics || { totalOrders: 0, revenue: \"0\", customers: 0, mtnPayments: 0 }} \n            isLoading={metricsLoading}\n          />\n\n          {/* Recent Orders & Quick Actions */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Recent Orders */}\n            <div className=\"lg:col-span-2\">\n              <Card className=\"bg-white shadow-sm border border-gray-200\">\n                <CardHeader className=\"border-b border-gray-200\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg font-medium text-gray-900\">Recent Orders</CardTitle>\n                    <Link href=\"/orders\">\n                      <Button variant=\"link\" className=\"text-sm text-blue-600 hover:text-blue-800 font-medium p-0\" data-testid=\"link-view-all-orders\">\n                        View all\n                      </Button>\n                    </Link>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"p-0\">\n                  <div className=\"divide-y divide-gray-200\">\n                    {recentOrdersData.length === 0 ? (\n                      <div className=\"px-6 py-8 text-center text-gray-500\">\n                        <FileText className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                        <p>No orders yet</p>\n                        <p className=\"text-sm\">Orders will appear here once customers start placing them</p>\n                      </div>\n                    ) : (\n                      recentOrdersData.map((order: any) => (\n                        <div key={order.id} className=\"px-6 py-4\" data-testid={`order-item-${order.id}`}>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"flex-shrink-0\">\n                                <div className=\"h-8 w-8 bg-gray-200 rounded-full flex items-center justify-center\">\n                                  <span className=\"text-xs font-medium text-gray-600\">\n                                    {order.orderNumber?.substring(0, 2) || \"OR\"}\n                                  </span>\n                                </div>\n                              </div>\n                              <div className=\"min-w-0 flex-1\">\n                                <p className=\"text-sm font-medium text-gray-900\" data-testid={`order-number-${order.id}`}>\n                                  Order #{order.orderNumber}\n                                </p>\n                                <p className=\"text-sm text-gray-500\">\n                                  {formatDate(order.createdAt)}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge \n                                className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(order.status)}`}\n                                data-testid={`order-status-${order.id}`}\n                              >\n                                {order.status}\n                              </Badge>\n                              <span className=\"text-sm font-medium text-gray-900\" data-testid={`order-amount-${order.id}`}>\n                                ‚Çµ{parseFloat(order.totalGhs || \"0\").toFixed(2)}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Quick Actions & System Status */}\n            <div className=\"space-y-6\">\n              {/* Quick Actions */}\n              <Card className=\"bg-white shadow-sm border border-gray-200\">\n                <CardHeader className=\"border-b border-gray-200\">\n                  <CardTitle className=\"text-lg font-medium text-gray-900\">Quick Actions</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6 space-y-4\">\n                  <Link href=\"/products\">\n                    <Button className=\"w-full bg-blue-600 text-white hover:bg-blue-700\" data-testid=\"button-add-product\">\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                      Add New Product\n                    </Button>\n                  </Link>\n                  <Link href=\"/coupons\">\n                    <Button className=\"w-full bg-green-600 text-white hover:bg-green-700\" data-testid=\"button-create-coupon\">\n                      <Tags className=\"mr-2 h-4 w-4\" />\n                      Create Coupon\n                    </Button>\n                  </Link>\n                  <Button className=\"w-full bg-purple-600 text-white hover:bg-purple-700\" data-testid=\"button-export-orders\">\n                    <Download className=\"mr-2 h-4 w-4\" />\n                    Export Orders\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* System Status */}\n              <Card className=\"bg-white shadow-sm border border-gray-200\">\n                <CardHeader className=\"border-b border-gray-200\">\n                  <CardTitle className=\"text-lg font-medium text-gray-900\">System Status</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6 space-y-4\">\n                  <div className=\"flex items-center justify-between\" data-testid=\"status-telegram\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"h-2 w-2 bg-green-400 rounded-full\"></div>\n                      <span className=\"text-sm text-gray-700\">Telegram Bot</span>\n                    </div>\n                    <span className=\"text-xs text-green-600 font-medium\">Online</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\" data-testid=\"status-mtn\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"h-2 w-2 bg-green-400 rounded-full\"></div>\n                      <span className=\"text-sm text-gray-700\">MTN MoMo API</span>\n                    </div>\n                    <span className=\"text-xs text-green-600 font-medium\">Connected</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\" data-testid=\"status-database\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"h-2 w-2 bg-green-400 rounded-full\"></div>\n                      <span className=\"text-sm text-gray-700\">Database</span>\n                    </div>\n                    <span className=\"text-xs text-green-600 font-medium\">Healthy</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\" data-testid=\"status-reconciliation\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"h-2 w-2 bg-yellow-400 rounded-full\"></div>\n                      <span className=\"text-sm text-gray-700\">Reconciliation</span>\n                    </div>\n                    <span className=\"text-xs text-yellow-600 font-medium\">Running</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10064},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/orders.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Topbar } from \"@/components/layout/topbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Search, FileText, Eye, Truck } from \"lucide-react\";\n\nexport default function Orders() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const { toast } = useToast();\n\n  const { data: orders = [], isLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const updateOrderMutation = useMutation({\n    mutationFn: async ({ orderId, updates }: { orderId: string; updates: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/orders/${orderId}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Order updated\",\n        description: \"Order status has been successfully updated.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredOrders = orders.filter((order: any) => {\n    const matchesSearch = \n      order.orderNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      order.customerPhone?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || order.status === statusFilter;\n\n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status.toUpperCase()) {\n      case 'PAID':\n        return 'bg-green-100 text-green-800';\n      case 'PENDING':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'PACKED':\n        return 'bg-blue-100 text-blue-800';\n      case 'SHIPPED':\n        return 'bg-purple-100 text-purple-800';\n      case 'DELIVERED':\n        return 'bg-emerald-100 text-emerald-800';\n      case 'CANCELLED':\n        return 'bg-red-100 text-red-800';\n      case 'REFUNDED':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  const handleStatusChange = (orderId: string, newStatus: string) => {\n    updateOrderMutation.mutate({\n      orderId,\n      updates: { status: newStatus }\n    });\n  };\n\n  const orderStatuses = [\n    'PENDING',\n    'PAID',\n    'PACKED',\n    'SHIPPED',\n    'DELIVERED',\n    'CANCELLED',\n    'REFUNDED'\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile sidebar */}\n      <div \n        className={`fixed inset-0 z-50 lg:hidden ${sidebarOpen ? 'block' : 'hidden'}`}\n        onClick={() => setSidebarOpen(false)}\n      >\n        <div className=\"fixed inset-y-0 left-0 z-50 w-64\">\n          <Sidebar />\n        </div>\n      </div>\n\n      {/* Desktop sidebar */}\n      <div className=\"hidden lg:fixed lg:inset-y-0 lg:left-0 lg:z-50 lg:block lg:w-64\">\n        <Sidebar />\n      </div>\n\n      {/* Main content */}\n      <div className=\"lg:pl-64\">\n        <Topbar onToggleSidebar={() => setSidebarOpen(!sidebarOpen)} />\n\n        <main className=\"py-8 px-4 sm:px-6 lg:px-8\" data-testid=\"orders-content\">\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Orders</h1>\n                <p className=\"mt-2 text-gray-600\">Manage customer orders and fulfillment</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Search and Filters */}\n          <Card className=\"bg-white border border-gray-200 mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label className=\"block text-sm font-medium text-gray-700 mb-1\">Search Orders</Label>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Search by order number or phone...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-search-orders\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"block text-sm font-medium text-gray-700 mb-1\">Status</Label>\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger data-testid=\"select-status-filter\">\n                      <SelectValue placeholder=\"All Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      {orderStatuses.map((status) => (\n                        <SelectItem key={status} value={status}>\n                          {status}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label className=\"block text-sm font-medium text-gray-700 mb-1\">Sort By</Label>\n                  <Select defaultValue=\"recent\">\n                    <SelectTrigger data-testid=\"select-sort\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"recent\">Most Recent</SelectItem>\n                      <SelectItem value=\"oldest\">Oldest First</SelectItem>\n                      <SelectItem value=\"amount-high\">Amount High-Low</SelectItem>\n                      <SelectItem value=\"amount-low\">Amount Low-High</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Orders Table */}\n          <Card className=\"bg-white shadow-sm border border-gray-200\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Order\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Customer\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Amount\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Status\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Date\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {isLoading ? (\n                    <tr>\n                      <td colSpan={6} className=\"px-6 py-12 text-center\">\n                        <div className=\"flex items-center justify-center\">\n                          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n                          <span className=\"ml-2 text-gray-500\">Loading orders...</span>\n                        </div>\n                      </td>\n                    </tr>\n                  ) : filteredOrders.length === 0 ? (\n                    <tr>\n                      <td colSpan={6} className=\"px-6 py-12 text-center\">\n                        <FileText className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                        <p className=\"text-gray-500 text-lg\">No orders found</p>\n                        <p className=\"text-gray-400 text-sm\">\n                          {searchQuery || statusFilter !== \"all\"\n                            ? \"Try adjusting your filters\"\n                            : \"Orders will appear here once customers start purchasing\"\n                          }\n                        </p>\n                      </td>\n                    </tr>\n                  ) : (\n                    filteredOrders.map((order: any) => (\n                      <tr key={order.id} className=\"hover:bg-gray-50\" data-testid={`order-row-${order.id}`}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div>\n                            <div className=\"text-sm font-medium text-gray-900\" data-testid={`order-number-${order.id}`}>\n                              {order.orderNumber}\n                            </div>\n                            {order.trackingNumber && (\n                              <div className=\"text-sm text-gray-500\">\n                                Tracking: {order.trackingNumber}\n                              </div>\n                            )}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm text-gray-900\">\n                            {order.customerPhone || \"N/A\"}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\" data-testid={`order-amount-${order.id}`}>\n                          ‚Çµ{parseFloat(order.totalGhs || \"0\").toFixed(2)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Select\n                            value={order.status}\n                            onValueChange={(value) => handleStatusChange(order.id, value)}\n                            disabled={updateOrderMutation.isPending}\n                          >\n                            <SelectTrigger className=\"w-32\">\n                              <Badge className={`${getStatusColor(order.status)} border-0`} data-testid={`order-status-${order.id}`}>\n                                {order.status}\n                              </Badge>\n                            </SelectTrigger>\n                            <SelectContent>\n                              {orderStatuses.map((status) => (\n                                <SelectItem key={status} value={status}>\n                                  {status}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {formatDate(order.createdAt)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-blue-600 hover:text-blue-900 mr-2\"\n                            data-testid={`button-view-${order.id}`}\n                          >\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View\n                          </Button>\n                          {(order.status === 'PAID' || order.status === 'PACKED') && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleStatusChange(order.id, order.status === 'PAID' ? 'PACKED' : 'SHIPPED')}\n                              className=\"text-green-600 hover:text-green-900\"\n                              data-testid={`button-fulfill-${order.id}`}\n                            >\n                              <Truck className=\"h-4 w-4 mr-1\" />\n                              {order.status === 'PAID' ? 'Pack' : 'Ship'}\n                            </Button>\n                          )}\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13383},"client/src/pages/payments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Topbar } from \"@/components/layout/topbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { RefreshCw, CheckCircle, Clock, XCircle, Percent, Info } from \"lucide-react\";\n\nexport default function Payments() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: payments = [], isLoading } = useQuery({\n    queryKey: [\"/api/payments\"],\n  });\n\n  const { data: reconciliationStatus } = useQuery({\n    queryKey: [\"/api/reconciliation/status\"],\n  });\n\n  const forceReconciliationMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/reconciliation/force\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reconciliation/status\"] });\n      toast({\n        title: \"Reconciliation completed\",\n        description: data.message,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Reconciliation failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status.toUpperCase()) {\n      case 'SUCCESS':\n        return 'bg-green-100 text-green-800';\n      case 'PENDING':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'FAILED':\n        return 'bg-red-100 text-red-800';\n      case 'TIMEOUT':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  const paymentMetrics = {\n    successful: payments.filter((p: any) => p.status === 'SUCCESS').length,\n    pending: payments.filter((p: any) => p.status === 'PENDING').length,\n    failed: payments.filter((p: any) => p.status === 'FAILED' || p.status === 'TIMEOUT').length,\n    successRate: payments.length > 0 \n      ? ((payments.filter((p: any) => p.status === 'SUCCESS').length / payments.length) * 100).toFixed(1)\n      : '0'\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile sidebar */}\n      <div \n        className={`fixed inset-0 z-50 lg:hidden ${sidebarOpen ? 'block' : 'hidden'}`}\n        onClick={() => setSidebarOpen(false)}\n      >\n        <div className=\"fixed inset-y-0 left-0 z-50 w-64\">\n          <Sidebar />\n        </div>\n      </div>\n\n      {/* Desktop sidebar */}\n      <div className=\"hidden lg:fixed lg:inset-y-0 lg:left-0 lg:z-50 lg:block lg:w-64\">\n        <Sidebar />\n      </div>\n\n      {/* Main content */}\n      <div className=\"lg:pl-64\">\n        <Topbar onToggleSidebar={() => setSidebarOpen(!sidebarOpen)} />\n\n        <main className=\"py-8 px-4 sm:px-6 lg:px-8\" data-testid=\"payments-content\">\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Payment Logs</h1>\n                <p className=\"mt-2 text-gray-600\">MTN Mobile Money transaction history and reconciliation</p>\n              </div>\n              <Button \n                className=\"bg-blue-600 text-white hover:bg-blue-700\"\n                onClick={() => forceReconciliationMutation.mutate()}\n                disabled={forceReconciliationMutation.isPending}\n                data-testid=\"button-force-reconciliation\"\n              >\n                <RefreshCw className={`mr-2 h-4 w-4 ${forceReconciliationMutation.isPending ? 'animate-spin' : ''}`} />\n                Force Reconciliation\n              </Button>\n            </div>\n          </div>\n\n          {/* MTN MoMo Status Dashboard */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"bg-white border border-gray-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"h-10 w-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                      <CheckCircle className=\"text-green-600 h-5 w-5\" />\n                    </div>\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Successful Payments</p>\n                    <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"metric-successful-payments\">\n                      {paymentMetrics.successful}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white border border-gray-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"h-10 w-10 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                      <Clock className=\"text-yellow-600 h-5 w-5\" />\n                    </div>\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Pending</p>\n                    <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"metric-pending-payments\">\n                      {paymentMetrics.pending}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white border border-gray-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"h-10 w-10 bg-red-100 rounded-lg flex items-center justify-center\">\n                      <XCircle className=\"text-red-600 h-5 w-5\" />\n                    </div>\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Failed</p>\n                    <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"metric-failed-payments\">\n                      {paymentMetrics.failed}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white border border-gray-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"h-10 w-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                      <Percent className=\"text-blue-600 h-5 w-5\" />\n                    </div>\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Success Rate</p>\n                    <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"metric-success-rate\">\n                      {paymentMetrics.successRate}%\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Payment Transactions Table */}\n          <Card className=\"bg-white shadow-sm border border-gray-200\">\n            <CardHeader className=\"border-b border-gray-200\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg font-medium text-gray-900\">Recent Transactions</CardTitle>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-gray-500\">Auto-reconciliation:</span>\n                  <Badge className=\"bg-green-100 text-green-800\" data-testid=\"reconciliation-status\">\n                    <div className=\"h-1.5 w-1.5 bg-green-400 rounded-full mr-1 animate-pulse\"></div>\n                    Active ({reconciliationStatus?.schedule || '*/15 * * * *'})\n                  </Badge>\n                </div>\n              </div>\n            </CardHeader>\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Order ID\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      MTN Reference\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Customer Phone\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Amount\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Status\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Timestamp\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {isLoading ? (\n                    <tr>\n                      <td colSpan={7} className=\"px-6 py-12 text-center\">\n                        <div className=\"flex items-center justify-center\">\n                          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n                          <span className=\"ml-2 text-gray-500\">Loading payments...</span>\n                        </div>\n                      </td>\n                    </tr>\n                  ) : payments.length === 0 ? (\n                    <tr>\n                      <td colSpan={7} className=\"px-6 py-12 text-center\">\n                        <CheckCircle className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                        <p className=\"text-gray-500 text-lg\">No payment transactions yet</p>\n                        <p className=\"text-gray-400 text-sm\">\n                          Payment logs will appear here once customers start making purchases\n                        </p>\n                      </td>\n                    </tr>\n                  ) : (\n                    payments.map((payment: any) => (\n                      <tr key={payment.id} className=\"hover:bg-gray-50\" data-testid={`payment-row-${payment.id}`}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span className=\"font-mono text-sm text-blue-600\" data-testid={`payment-order-${payment.id}`}>\n                            {payment.externalId || 'N/A'}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span className=\"font-mono text-sm text-gray-900\">\n                            {payment.providerReference || 'PENDING'}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {payment.customerPhone}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\" data-testid={`payment-amount-${payment.id}`}>\n                          ‚Çµ{parseFloat(payment.amountGhs || \"0\").toFixed(2)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Badge className={getStatusColor(payment.status)} data-testid={`payment-status-${payment.id}`}>\n                            {payment.status}\n                          </Badge>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {formatDate(payment.createdAt)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-blue-600 hover:text-blue-900\"\n                            data-testid={`button-view-details-${payment.id}`}\n                          >\n                            View Details\n                          </Button>\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </Card>\n\n          {/* Reconciliation Job Status */}\n          <Alert className=\"mt-8 bg-blue-50 border-blue-200\">\n            <Info className=\"h-4 w-4 text-blue-600\" />\n            <AlertDescription className=\"text-blue-700\">\n              <h3 className=\"text-sm font-medium text-blue-800 mb-2\">Automatic Reconciliation</h3>\n              <p className=\"text-sm\">\n                The system automatically reconciles pending payments every 15 minutes. Payments timeout after 10 minutes if no confirmation is received from MTN MoMo.\n              </p>\n              {reconciliationStatus && (\n                <div className=\"mt-2 text-sm\">\n                  <p><strong>Last reconciliation:</strong> {reconciliationStatus.lastRun ? formatDate(reconciliationStatus.lastRun) : 'Not available'}</p>\n                  <p><strong>Next scheduled:</strong> {reconciliationStatus.nextRun ? formatDate(reconciliationStatus.nextRun) : 'Not available'}</p>\n                </div>\n              )}\n            </AlertDescription>\n          </Alert>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14537},"client/src/pages/products.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Topbar } from \"@/components/layout/topbar\";\nimport { ProductModal } from \"@/components/modals/product-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Plus, Search, Edit, Trash2, Package } from \"lucide-react\";\nimport type { Product, Category } from \"@shared/schema\";\n\nexport default function Products() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<any>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const { toast } = useToast();\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      await apiRequest(\"DELETE\", `/api/products/${productId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Product deleted\",\n        description: \"Product has been successfully deleted.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Delete failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredProducts = products.filter((product: Product) => {\n    const matchesSearch = \n      product.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      product.sku.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesCategory = categoryFilter === \"all\" || product.categoryId === categoryFilter;\n    \n    const matchesStatus = statusFilter === \"all\" || \n      (statusFilter === \"active\" && product.isActive && product.stock > 0) ||\n      (statusFilter === \"draft\" && !product.isActive) ||\n      (statusFilter === \"out-of-stock\" && product.stock === 0);\n\n    return matchesSearch && matchesCategory && matchesStatus;\n  });\n\n  const handleEditProduct = (product: Product) => {\n    setEditingProduct(product);\n    setIsModalOpen(true);\n  };\n\n  const handleDeleteProduct = (productId: string) => {\n    if (confirm(\"Are you sure you want to delete this product?\")) {\n      deleteProductMutation.mutate(productId);\n    }\n  };\n\n  const getStockStatus = (stock: number) => {\n    if (stock === 0) return { text: \"Out of stock\", color: \"bg-red-100 text-red-800\" };\n    if (stock <= 5) return { text: `${stock} in stock`, color: \"bg-yellow-100 text-yellow-800\" };\n    return { text: `${stock} in stock`, color: \"bg-green-100 text-green-800\" };\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile sidebar */}\n      <div \n        className={`fixed inset-0 z-50 lg:hidden ${sidebarOpen ? 'block' : 'hidden'}`}\n        onClick={() => setSidebarOpen(false)}\n      >\n        <div className=\"fixed inset-y-0 left-0 z-50 w-64\">\n          <Sidebar />\n        </div>\n      </div>\n\n      {/* Desktop sidebar */}\n      <div className=\"hidden lg:fixed lg:inset-y-0 lg:left-0 lg:z-50 lg:block lg:w-64\">\n        <Sidebar />\n      </div>\n\n      {/* Main content */}\n      <div className=\"lg:pl-64\">\n        <Topbar onToggleSidebar={() => setSidebarOpen(!sidebarOpen)} />\n\n        <main className=\"py-8 px-4 sm:px-6 lg:px-8\" data-testid=\"products-content\">\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Products</h1>\n                <p className=\"mt-2 text-gray-600\">Manage your product catalog and inventory</p>\n              </div>\n              <Button \n                className=\"bg-blue-600 text-white hover:bg-blue-700\"\n                onClick={() => {\n                  setEditingProduct(null);\n                  setIsModalOpen(true);\n                }}\n                data-testid=\"button-add-product\"\n              >\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Add Product\n              </Button>\n            </div>\n          </div>\n\n          {/* Search and Filters */}\n          <Card className=\"bg-white border border-gray-200 mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div>\n                  <Label className=\"block text-sm font-medium text-gray-700 mb-1\">Search Products</Label>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Search by name or SKU...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-search-products\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"block text-sm font-medium text-gray-700 mb-1\">Category</Label>\n                  <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                    <SelectTrigger data-testid=\"select-category-filter\">\n                      <SelectValue placeholder=\"All Categories\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Categories</SelectItem>\n                      {categories.map((category: any) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label className=\"block text-sm font-medium text-gray-700 mb-1\">Status</Label>\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger data-testid=\"select-status-filter\">\n                      <SelectValue placeholder=\"All Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"draft\">Draft</SelectItem>\n                      <SelectItem value=\"out-of-stock\">Out of Stock</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label className=\"block text-sm font-medium text-gray-700 mb-1\">Sort By</Label>\n                  <Select defaultValue=\"recent\">\n                    <SelectTrigger data-testid=\"select-sort\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"recent\">Recently Added</SelectItem>\n                      <SelectItem value=\"name\">Name A-Z</SelectItem>\n                      <SelectItem value=\"price-low\">Price Low-High</SelectItem>\n                      <SelectItem value=\"stock\">Stock Level</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Products Table */}\n          <Card className=\"bg-white shadow-sm border border-gray-200\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Product\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      SKU\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Category\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Price (GHS)\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Stock\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Status\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {isLoading ? (\n                    <tr>\n                      <td colSpan={7} className=\"px-6 py-12 text-center\">\n                        <div className=\"flex items-center justify-center\">\n                          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n                          <span className=\"ml-2 text-gray-500\">Loading products...</span>\n                        </div>\n                      </td>\n                    </tr>\n                  ) : filteredProducts.length === 0 ? (\n                    <tr>\n                      <td colSpan={7} className=\"px-6 py-12 text-center\">\n                        <Package className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                        <p className=\"text-gray-500 text-lg\">No products found</p>\n                        <p className=\"text-gray-400 text-sm\">\n                          {searchQuery || categoryFilter !== \"all\" || statusFilter !== \"all\"\n                            ? \"Try adjusting your filters\"\n                            : \"Get started by adding your first product\"\n                          }\n                        </p>\n                      </td>\n                    </tr>\n                  ) : (\n                    filteredProducts.map((product: any) => {\n                      const stockStatus = getStockStatus(product.stock);\n                      const category = categories.find((c: any) => c.id === product.categoryId);\n                      \n                      return (\n                        <tr key={product.id} className=\"hover:bg-gray-50\" data-testid={`product-row-${product.id}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <div className=\"h-12 w-12 bg-gray-200 rounded-lg flex items-center justify-center mr-4\">\n                                <Package className=\"h-6 w-6 text-gray-400\" />\n                              </div>\n                              <div>\n                                <div className=\"text-sm font-medium text-gray-900\" data-testid={`product-title-${product.id}`}>\n                                  {product.title}\n                                </div>\n                                <div className=\"text-sm text-gray-500 truncate max-w-xs\">\n                                  {product.description || \"No description\"}\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <span className=\"font-mono text-sm text-gray-900\" data-testid={`product-sku-${product.id}`}>\n                              {product.sku}\n                            </span>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {category?.name || \"Uncategorized\"}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\" data-testid={`product-price-${product.id}`}>\n                            ‚Çµ{parseFloat(product.priceGhs || \"0\").toFixed(2)}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge className={`${stockStatus.color}`} data-testid={`product-stock-${product.id}`}>\n                              {stockStatus.text}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge className={product.isActive ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"}>\n                              {product.isActive ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditProduct(product)}\n                              className=\"text-blue-600 hover:text-blue-900 mr-3\"\n                              data-testid={`button-edit-${product.id}`}\n                            >\n                              <Edit className=\"h-4 w-4 mr-1\" />\n                              Edit\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteProduct(product.id)}\n                              className=\"text-red-600 hover:text-red-900\"\n                              disabled={deleteProductMutation.isPending}\n                              data-testid={`button-delete-${product.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-1\" />\n                              Delete\n                            </Button>\n                          </td>\n                        </tr>\n                      );\n                    })\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </Card>\n        </main>\n      </div>\n\n      {/* Product Modal */}\n      <ProductModal\n        isOpen={isModalOpen}\n        onClose={() => {\n          setIsModalOpen(false);\n          setEditingProduct(null);\n        }}\n        product={editingProduct}\n        categories={categories}\n      />\n    </div>\n  );\n}\n","size_bytes":15413},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Topbar } from \"@/components/layout/topbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Settings, User, Lock, AlertTriangle } from \"lucide-react\";\n\nexport default function SettingsPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [passwordForm, setPasswordForm] = useState({\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\"\n  });\n  const { user, changePasswordMutation } = useAuth();\n  const { toast } = useToast();\n\n  const handlePasswordChange = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (passwordForm.newPassword !== passwordForm.confirmPassword) {\n      toast({\n        title: \"Password mismatch\",\n        description: \"New password and confirmation password do not match.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (passwordForm.newPassword.length < 8) {\n      toast({\n        title: \"Password too short\",\n        description: \"Password must be at least 8 characters long.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    changePasswordMutation.mutate({\n      currentPassword: passwordForm.currentPassword,\n      newPassword: passwordForm.newPassword,\n    });\n\n    // Reset form on success\n    if (!changePasswordMutation.isError) {\n      setPasswordForm({\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile sidebar */}\n      <div \n        className={`fixed inset-0 z-50 lg:hidden ${sidebarOpen ? 'block' : 'hidden'}`}\n        onClick={() => setSidebarOpen(false)}\n      >\n        <div className=\"fixed inset-y-0 left-0 z-50 w-64\">\n          <Sidebar />\n        </div>\n      </div>\n\n      {/* Desktop sidebar */}\n      <div className=\"hidden lg:fixed lg:inset-y-0 lg:left-0 lg:z-50 lg:block lg:w-64\">\n        <Sidebar />\n      </div>\n\n      {/* Main content */}\n      <div className=\"lg:pl-64\">\n        <Topbar onToggleSidebar={() => setSidebarOpen(!sidebarOpen)} />\n\n        <main className=\"py-8 px-4 sm:px-6 lg:px-8\" data-testid=\"settings-content\">\n          <div className=\"mb-8\">\n            <div className=\"flex items-center space-x-2\">\n              <Settings className=\"h-8 w-8 text-gray-900\" />\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Settings</h1>\n                <p className=\"mt-2 text-gray-600\">Manage your account and system preferences</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-8 max-w-2xl\">\n            {/* Password Change Alert */}\n            {user?.mustChangePassword && (\n              <Alert className=\"bg-amber-50 border-amber-200\">\n                <AlertTriangle className=\"h-4 w-4 text-amber-600\" />\n                <AlertDescription className=\"text-amber-800\">\n                  <strong>Password Change Required:</strong> You must change your password before continuing to use the system.\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {/* User Profile */}\n            <Card className=\"bg-white shadow-sm border border-gray-200\">\n              <CardHeader className=\"border-b border-gray-200\">\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"h-5 w-5\" />\n                  <span>User Profile</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700\">Name</Label>\n                      <div className=\"mt-1 text-sm text-gray-900\" data-testid=\"user-profile-name\">\n                        {user?.name || \"N/A\"}\n                      </div>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700\">Email</Label>\n                      <div className=\"mt-1 text-sm text-gray-900\" data-testid=\"user-profile-email\">\n                        {user?.email || \"N/A\"}\n                      </div>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700\">Role</Label>\n                      <div className=\"mt-1 text-sm text-gray-900\" data-testid=\"user-profile-role\">\n                        {user?.role || \"N/A\"}\n                      </div>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700\">User ID</Label>\n                      <div className=\"mt-1 text-sm text-gray-500 font-mono\" data-testid=\"user-profile-id\">\n                        {user?.id ? `${user.id.substring(0, 8)}...` : \"N/A\"}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Change Password */}\n            <Card className=\"bg-white shadow-sm border border-gray-200\">\n              <CardHeader className=\"border-b border-gray-200\">\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Lock className=\"h-5 w-5\" />\n                  <span>Change Password</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <form onSubmit={handlePasswordChange} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"currentPassword\">Current Password</Label>\n                    <Input\n                      id=\"currentPassword\"\n                      type=\"password\"\n                      value={passwordForm.currentPassword}\n                      onChange={(e) => setPasswordForm({ ...passwordForm, currentPassword: e.target.value })}\n                      placeholder=\"Enter your current password\"\n                      required\n                      data-testid=\"input-current-password\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"newPassword\">New Password</Label>\n                    <Input\n                      id=\"newPassword\"\n                      type=\"password\"\n                      value={passwordForm.newPassword}\n                      onChange={(e) => setPasswordForm({ ...passwordForm, newPassword: e.target.value })}\n                      placeholder=\"Enter your new password\"\n                      required\n                      minLength={8}\n                      data-testid=\"input-new-password\"\n                    />\n                    <p className=\"mt-1 text-sm text-gray-500\">\n                      Password must be at least 8 characters long\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                    <Input\n                      id=\"confirmPassword\"\n                      type=\"password\"\n                      value={passwordForm.confirmPassword}\n                      onChange={(e) => setPasswordForm({ ...passwordForm, confirmPassword: e.target.value })}\n                      placeholder=\"Confirm your new password\"\n                      required\n                      data-testid=\"input-confirm-password\"\n                    />\n                  </div>\n                  \n                  <Button \n                    type=\"submit\" \n                    disabled={changePasswordMutation.isPending}\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                    data-testid=\"button-change-password\"\n                  >\n                    {changePasswordMutation.isPending ? \"Changing Password...\" : \"Change Password\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* System Information */}\n            <Card className=\"bg-white shadow-sm border border-gray-200\">\n              <CardHeader className=\"border-b border-gray-200\">\n                <CardTitle>System Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700\">Environment</Label>\n                      <div className=\"mt-1 text-sm text-gray-900\">\n                        {process.env.NODE_ENV || \"development\"}\n                      </div>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700\">Version</Label>\n                      <div className=\"mt-1 text-sm text-gray-900\">\n                        EcomBot Admin v1.0.0\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"border-t border-gray-200 pt-4\">\n                    <Label className=\"text-sm font-medium text-gray-700\">Service Status</Label>\n                    <div className=\"mt-2 space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-600\">Database Connection</span>\n                        <div className=\"flex items-center space-x-1\">\n                          <div className=\"h-2 w-2 bg-green-400 rounded-full\"></div>\n                          <span className=\"text-xs text-green-600\">Connected</span>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-600\">Telegram Bot API</span>\n                        <div className=\"flex items-center space-x-1\">\n                          <div className=\"h-2 w-2 bg-green-400 rounded-full\"></div>\n                          <span className=\"text-xs text-green-600\">Online</span>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-600\">MTN MoMo Integration</span>\n                        <div className=\"flex items-center space-x-1\">\n                          <div className=\"h-2 w-2 bg-green-400 rounded-full\"></div>\n                          <span className=\"text-xs text-green-600\">Connected</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Support Information */}\n            <Card className=\"bg-blue-50 border-blue-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center\">\n                  <h3 className=\"text-lg font-medium text-blue-900 mb-2\">Need Help?</h3>\n                  <p className=\"text-sm text-blue-700 mb-4\">\n                    If you need assistance with the EcomBot admin system, please contact support.\n                  </p>\n                  <div className=\"space-y-1 text-sm text-blue-600\">\n                    <p><strong>Email:</strong> support@ecombot.gh</p>\n                    <p><strong>Documentation:</strong> Available in README.md</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11996},"client/src/components/charts/metrics-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { ShoppingBag, DollarSign, Users, Smartphone } from \"lucide-react\";\n\ninterface MetricsData {\n  totalOrders: number;\n  revenue: string;\n  customers: number;\n  mtnPayments: number;\n}\n\ninterface MetricsCardsProps {\n  data: MetricsData;\n  isLoading?: boolean;\n}\n\nexport function MetricsCards({ data, isLoading }: MetricsCardsProps) {\n  const metrics = [\n    {\n      title: \"Total Orders\",\n      value: isLoading ? \"...\" : data.totalOrders.toLocaleString(),\n      icon: ShoppingBag,\n      iconBg: \"bg-blue-100\",\n      iconColor: \"text-blue-600\",\n      change: \"+12.3%\",\n      changeLabel: \"from last month\",\n      testId: \"metric-orders\"\n    },\n    {\n      title: \"Revenue (GHS)\",\n      value: isLoading ? \"...\" : `‚Çµ${parseFloat(data.revenue || \"0\").toLocaleString()}`,\n      icon: DollarSign,\n      iconBg: \"bg-green-100\",\n      iconColor: \"text-green-600\",\n      change: \"+8.7%\",\n      changeLabel: \"from last month\",\n      testId: \"metric-revenue\"\n    },\n    {\n      title: \"Active Customers\",\n      value: isLoading ? \"...\" : data.customers.toLocaleString(),\n      icon: Users,\n      iconBg: \"bg-purple-100\",\n      iconColor: \"text-purple-600\",\n      change: \"+5.2%\",\n      changeLabel: \"from last month\",\n      testId: \"metric-customers\"\n    },\n    {\n      title: \"MTN Payments\",\n      value: isLoading ? \"...\" : data.mtnPayments.toLocaleString(),\n      icon: Smartphone,\n      iconBg: \"bg-yellow-100\",\n      iconColor: \"text-yellow-600\",\n      change: \"98.5%\",\n      changeLabel: \"success rate\",\n      testId: \"metric-payments\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4 mb-8\">\n      {metrics.map((metric) => {\n        const Icon = metric.icon;\n        \n        return (\n          <Card key={metric.title} className=\"bg-white shadow-sm border border-gray-200\" data-testid={metric.testId}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <div className={`h-10 w-10 ${metric.iconBg} rounded-lg flex items-center justify-center`}>\n                    <Icon className={`${metric.iconColor} h-5 w-5`} />\n                  </div>\n                </div>\n                <div className=\"ml-4 w-0 flex-1\">\n                  <dl>\n                    <dt className=\"text-sm font-medium text-gray-500 truncate\">{metric.title}</dt>\n                    <dd className=\"text-2xl font-semibold text-gray-900\" data-testid={`${metric.testId}-value`}>\n                      {metric.value}\n                    </dd>\n                  </dl>\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                <div className=\"flex items-center text-sm\">\n                  <span className=\"text-green-600 font-medium\">{metric.change}</span>\n                  <span className=\"text-gray-500 ml-1\">{metric.changeLabel}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3088},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { \n  ShoppingCart, \n  BarChart3, \n  Package, \n  ShoppingBag, \n  Users, \n  CreditCard, \n  Tags, \n  Settings, \n  User \n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: BarChart3 },\n  { name: \"Products\", href: \"/products\", icon: Package },\n  { name: \"Orders\", href: \"/orders\", icon: ShoppingBag },\n  { name: \"Customers\", href: \"/customers\", icon: Users },\n  { name: \"Payments\", href: \"/payments\", icon: CreditCard },\n  { name: \"Coupons\", href: \"/coupons\", icon: Tags },\n  { name: \"Analytics\", href: \"/analytics\", icon: BarChart3 },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n];\n\ninterface SidebarProps {\n  className?: string;\n}\n\nexport function Sidebar({ className }: SidebarProps) {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  return (\n    <div className={cn(\"flex flex-col h-full bg-white shadow-lg border-r border-gray-200\", className)}>\n      {/* Logo */}\n      <div className=\"flex items-center justify-center h-16 px-4 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"h-8 w-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n            <ShoppingCart className=\"text-white text-sm h-4 w-4\" />\n          </div>\n          <span className=\"text-xl font-bold text-gray-900\">EcomBot</span>\n        </div>\n      </div>\n      \n      {/* Navigation */}\n      <nav className=\"mt-5 px-2 space-y-1 flex-1\" data-testid=\"sidebar-navigation\">\n        {navigation.map((item) => {\n          const isActive = location === item.href || (item.href === \"/dashboard\" && location === \"/\");\n          const Icon = item.icon;\n          \n          return (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={cn(\n                \"group flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors\",\n                isActive\n                  ? \"bg-blue-50 text-blue-700\"\n                  : \"text-gray-600 hover:bg-gray-50 hover:text-gray-900\"\n              )}\n              data-testid={`nav-link-${item.name.toLowerCase()}`}\n            >\n              <Icon \n                className={cn(\n                  \"mr-3 h-5 w-5\",\n                  isActive ? \"text-blue-500\" : \"text-gray-400\"\n                )} \n              />\n              {item.name}\n            </Link>\n          );\n        })}\n      </nav>\n      \n      {/* User Profile */}\n      <div className=\"p-4 border-t border-gray-200\">\n        <div className=\"flex items-center\" data-testid=\"user-profile\">\n          <div className=\"flex-shrink-0\">\n            <div className=\"h-8 w-8 bg-gray-300 rounded-full flex items-center justify-center\">\n              <User className=\"text-gray-600 text-sm h-4 w-4\" />\n            </div>\n          </div>\n          <div className=\"ml-3 min-w-0\">\n            <p className=\"text-sm font-medium text-gray-900 truncate\" data-testid=\"user-name\">\n              {user?.name || \"Admin User\"}\n            </p>\n            <p className=\"text-xs text-gray-500 truncate\" data-testid=\"user-email\">\n              {user?.email || \"admin@example.com\"}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3347},"client/src/components/layout/topbar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Bell, Menu } from \"lucide-react\";\n\ninterface TopbarProps {\n  onToggleSidebar?: () => void;\n}\n\nexport function Topbar({ onToggleSidebar }: TopbarProps) {\n  const { logoutMutation } = useAuth();\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <div className=\"sticky top-0 z-40 flex h-16 shrink-0 items-center gap-x-4 border-b border-gray-200 bg-white px-4 shadow-sm sm:gap-x-6 sm:px-6 lg:px-8\">\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"-m-2.5 p-2.5 text-gray-700 lg:hidden\"\n        onClick={onToggleSidebar}\n        data-testid=\"button-toggle-sidebar\"\n      >\n        <Menu className=\"h-5 w-5\" />\n      </Button>\n      \n      <div className=\"flex flex-1 gap-x-4 self-stretch lg:gap-x-6\">\n        <div className=\"relative flex flex-1\">\n          {/* Search functionality placeholder */}\n        </div>\n        <div className=\"flex items-center gap-x-4 lg:gap-x-6\">\n          {/* MTN MoMo Status Indicator */}\n          <div className=\"flex items-center space-x-2\" data-testid=\"mtn-status\">\n            <div className=\"h-2 w-2 bg-green-400 rounded-full animate-pulse\"></div>\n            <span className=\"text-sm text-gray-600\">MTN MoMo Connected</span>\n          </div>\n          \n          {/* Notifications */}\n          <Button variant=\"ghost\" size=\"sm\" className=\"-m-2.5 p-2.5 text-gray-400 hover:text-gray-500\" data-testid=\"button-notifications\">\n            <Bell className=\"h-5 w-5\" />\n          </Button>\n\n          {/* Logout */}\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={handleLogout}\n            disabled={logoutMutation.isPending}\n            data-testid=\"button-logout\"\n          >\n            {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1947},"client/src/components/modals/product-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { CloudUpload } from \"lucide-react\";\n\ninterface ProductModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  product?: any;\n  categories: any[];\n}\n\nexport function ProductModal({ isOpen, onClose, product, categories }: ProductModalProps) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    title: \"\",\n    sku: \"\",\n    description: \"\",\n    priceGhs: \"\",\n    stock: \"\",\n    categoryId: \"\",\n    isActive: true,\n    images: [] as string[],\n    tags: [] as string[],\n  });\n\n  useEffect(() => {\n    if (product) {\n      setFormData({\n        title: product.title || \"\",\n        sku: product.sku || \"\",\n        description: product.description || \"\",\n        priceGhs: product.priceGhs || \"\",\n        stock: product.stock?.toString() || \"\",\n        categoryId: product.categoryId || \"\",\n        isActive: product.isActive ?? true,\n        images: product.images || [],\n        tags: product.tags || [],\n      });\n    } else {\n      setFormData({\n        title: \"\",\n        sku: \"\",\n        description: \"\",\n        priceGhs: \"\",\n        stock: \"\",\n        categoryId: \"\",\n        isActive: true,\n        images: [],\n        tags: [],\n      });\n    }\n  }, [product]);\n\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/products\", productData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      onClose();\n      toast({\n        title: \"Product created\",\n        description: \"Product has been successfully created.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Creation failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/products/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      onClose();\n      toast({\n        title: \"Product updated\",\n        description: \"Product has been successfully updated.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const submitData = {\n      ...formData,\n      priceGhs: parseFloat(formData.priceGhs),\n      stock: parseInt(formData.stock),\n    };\n\n    if (product) {\n      updateProductMutation.mutate({ id: product.id, data: submitData });\n    } else {\n      createProductMutation.mutate(submitData);\n    }\n  };\n\n  const handleChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const isLoading = createProductMutation.isPending || updateProductMutation.isPending;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {product ? \"Edit Product\" : \"Add New Product\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"title\">Product Name *</Label>\n              <Input\n                id=\"title\"\n                value={formData.title}\n                onChange={(e) => handleChange(\"title\", e.target.value)}\n                placeholder=\"Enter product name\"\n                required\n                data-testid=\"input-product-title\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"sku\">SKU *</Label>\n              <Input\n                id=\"sku\"\n                value={formData.sku}\n                onChange={(e) => handleChange(\"sku\", e.target.value)}\n                placeholder=\"Enter SKU\"\n                required\n                data-testid=\"input-product-sku\"\n              />\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => handleChange(\"description\", e.target.value)}\n              placeholder=\"Enter product description\"\n              rows={3}\n              data-testid=\"input-product-description\"\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div>\n              <Label htmlFor=\"priceGhs\">Price (GHS) *</Label>\n              <Input\n                id=\"priceGhs\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                value={formData.priceGhs}\n                onChange={(e) => handleChange(\"priceGhs\", e.target.value)}\n                placeholder=\"0.00\"\n                required\n                data-testid=\"input-product-price\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"stock\">Stock Quantity *</Label>\n              <Input\n                id=\"stock\"\n                type=\"number\"\n                min=\"0\"\n                value={formData.stock}\n                onChange={(e) => handleChange(\"stock\", e.target.value)}\n                placeholder=\"0\"\n                required\n                data-testid=\"input-product-stock\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"category\">Category</Label>\n              <Select value={formData.categoryId} onValueChange={(value) => handleChange(\"categoryId\", value)}>\n                <SelectTrigger data-testid=\"select-product-category\">\n                  <SelectValue placeholder=\"Select category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">No category</SelectItem>\n                  {categories.map((category) => (\n                    <SelectItem key={category.id} value={category.id}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div>\n            <Label>Product Images</Label>\n            <div className=\"mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-lg\">\n              <div className=\"space-y-1 text-center\">\n                <CloudUpload className=\"mx-auto h-12 w-12 text-gray-400\" />\n                <div className=\"flex text-sm text-gray-600\">\n                  <label htmlFor=\"file-upload\" className=\"relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500\">\n                    <span>Upload files</span>\n                    <input\n                      id=\"file-upload\"\n                      name=\"file-upload\"\n                      type=\"file\"\n                      className=\"sr-only\"\n                      multiple\n                      accept=\"image/*\"\n                      data-testid=\"input-product-images\"\n                    />\n                  </label>\n                  <p className=\"pl-1\">or drag and drop</p>\n                </div>\n                <p className=\"text-xs text-gray-500\">PNG, JPG, GIF up to 10MB</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={isLoading}\n              data-testid=\"button-cancel-product\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n              data-testid=\"button-save-product\"\n            >\n              {isLoading \n                ? (product ? \"Updating...\" : \"Creating...\") \n                : (product ? \"Update Product\" : \"Save Product\")\n              }\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9080},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}